#!/usr/bin/env node

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ performance –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node database/apply-indexes.js
 */

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

// –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pg –±–µ–∑ TypeScript –º–æ–¥—É–ª—è
const { Pool } = require('pg');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
let pool;

function getPool() {
  if (!pool) {
    const config = {
      connectionString: process.env.DATABASE_URL || undefined,
      host: process.env.DB_HOST || process.env.POSTGRESQL_HOST || "localhost",
      port: Number(process.env.DB_PORT || process.env.POSTGRESQL_PORT || 5432),
      user: process.env.DB_USER || process.env.POSTGRESQL_USER || "postgres",
      password: process.env.DB_PASSWORD || process.env.POSTGRESQL_PASSWORD || "",
      database: process.env.DB_NAME || process.env.POSTGRESQL_DBNAME || "medsip_protez",
      max: 5, // –ù–µ–±–æ–ª—å—à–æ–π pool –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
      ssl: (process.env.PGSSL === "true" || process.env.DATABASE_SSL === "true") ? { rejectUnauthorized: false } : undefined,
    };
    
    pool = new Pool(config);
  }
  return pool;
}

async function executeQuery(query, params = []) {
  const client = getPool();
  return await client.query(query, params);
}

async function testConnection() {
  try {
    await executeQuery('SELECT 1');
    return true;
  } catch (error) {
    console.error('Connection test failed:', error.message);
    return false;
  }
}

async function applyIndexes() {
  console.log('üèóÔ∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ performance –∏–Ω–¥–µ–∫—Å–æ–≤...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const connected = await testConnection();
    
    if (!connected) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      process.exit(1);
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, 'performance-indexes.sql');
    console.log(`üìÑ –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª: ${sqlPath}`);
    
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      if (command.startsWith('--') || command.trim() === '') {
        continue;
      }
      
      try {
        console.log(`‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${commands.length}...`);
        
        if (command.includes('CREATE INDEX')) {
          const indexName = command.match(/idx_[a-zA-Z0-9_]+/);
          console.log(`   üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: ${indexName ? indexName[0] : 'unknown'}`);
        }
        
        await executeQuery(command + ';');
        successCount++;
        console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        
      } catch (error) {
        errorCount++;
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–∞—Ö
        if (error.message.includes('already exists')) {
          console.log(`   ‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: –∏–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          successCount++;
          errorCount--;
        } else {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message);
        }
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
    
    if (errorCount === 0) {
      console.log('\nüéâ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
      console.log('üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ —É–ª—É—á—à–∏—Ç—å—Å—è');
    } else {
      console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º ANALYZE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü...');
    
    const tables = [
      'products', 
      'product_variants', 
      'product_characteristics_simple',
      'characteristics_values_simple',
      'characteristics_groups_simple',
      'product_categories',
      'manufacturers',
      'model_series'
    ];
    
    for (const table of tables) {
      try {
        await executeQuery(`ANALYZE ${table}`);
        console.log(`   ‚úÖ ${table} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  ${table}: ${error.message}`);
      }
    }
    
    console.log('\nüèÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
applyIndexes().catch(error => {
  console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
  process.exit(1);
});