import type {
  ProductFormData,
  ProductCategory,
  ProductManufacturer,
  ProductModelLine,
  ProductCharacteristic
} from '@/lib/types/product-form'
import { apiClient } from '@/lib/unified-api-client'

export class ProductService {
  private static instance: ProductService
  private api = apiClient

  constructor() {
    // API client —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ singleton
  }

  static getInstance(): ProductService {
    if (!ProductService.instance) {
      ProductService.instance = new ProductService()
    }
    return ProductService.instance
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
  async loadProduct(id: string): Promise<any> {
    try {
      const result = await this.api.get(`/products/${id}`)
      return result.success ? result.data : null
    } catch (error) {
      console.error('Error loading product:', error)
      throw error
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
  async saveProduct(productData: ProductFormData): Promise<string> {
    try {
      const isUpdate = !!productData.id

      let result
      if (isUpdate) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ 30 —Å–µ–∫—É–Ω–¥
        result = await this.api.put('/products', productData, {
          timeout: 30_000, // 30 —Å–µ–∫—É–Ω–¥
          retries: 2
        })
      } else {
        result = await this.api.post('/products', productData, {
          timeout: 30_000, // 30 —Å–µ–∫—É–Ω–¥
          retries: 2
        })
      }

      if (!result.success) {
        console.error('‚ùå Product save failed:', result.error)
        throw new Error(result.error || 'Save failed')
      }
      return result.data.id
    } catch (error) {
      console.error('‚ùå Error saving product:', error)

      // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      if (error.name === 'AbortError') {
        throw new Error('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      } else if (error.message?.includes('net::ERR_CONNECTION_RESET')) {
        throw new Error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
      } else if ((error as any).status === 400 || error.message?.includes('HTTP 400')) {
        // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö - –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
        throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      } else if ((error as any).status === 409 || error.message?.includes('HTTP 409')) {
        // –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö - –ø–µ—Ä–µ–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const suggestion = (error as any).suggestion;
        const existingProduct = (error as any).existingProduct;

        let errorMessage = error.message || '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö';
        if (suggestion) {
          errorMessage += `\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${suggestion}`;
        }
        if (existingProduct) {
          errorMessage += `\n\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç: ${existingProduct.name} (ID: ${existingProduct.id}) —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è "${existingProduct.manufacturer}"`;
        }

        throw new Error(errorMessage);
      } else if (error.message?.includes('HTTP 500')) {
        throw new Error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      }

      throw error
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞
  async loadProductImages(productId: string): Promise<string[]> {
    try {
      const result = await this.api.get(`/products/${productId}/images`)
      return result.success ? result.data : []
    } catch (error) {
      console.error('Error loading product images:', error)
      return []
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞
  async saveProductImages(productId: string, _images: string[]): Promise<void> {
    try {
      const result = await this.api.put(`/products/${productId}/images`, { images: _images })
      if (!result.success) throw new Error(result.error || 'Images save failed')
    } catch (error) {
      console.error('Error saving product images:', error)
      throw error
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
  async loadCharacteristics(productId: string): Promise<any[]> {
    try {
      const result = await this.api.get(`/products/${productId}/characteristics-simple`)

      if (!result.success) {
        return []
      }

      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const data = result.data

      // –ï—Å–ª–∏ –µ—Å—Ç—å selected_characteristics, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ö
      if (data.selected_characteristics && Array.isArray(data.selected_characteristics)) {
        const characteristics: ProductCharacteristic[] = []

        data.selected_characteristics.forEach((group: any) => {
          if (group.characteristics && Array.isArray(group.characteristics)) {
            group.characteristics.forEach((char: any) => {
              characteristics.push({
                value_id: char.value_id,
                value_name: char.value_name,
                group_id: group.group_id || char.group_id,
                group_name: group.group_name,
                additional_value: char.additional_value || '',
                color_hex: char.color_hex
              } as any)
            })
          }
        })

        return characteristics
      }

      // –ï—Å–ª–∏ data —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      if (Array.isArray(data)) {
        return data
      }

      return []
    } catch (error) {
      console.error('Error loading characteristics:', error)
      return []
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
  async saveCharacteristics(productId: string, _characteristics: any[]): Promise<void> {
    try {
      const result = await this.api.post(`/products/${productId}/characteristics-simple`, { characteristics: _characteristics })
      if (!result.success) throw new Error(result.error || 'Characteristics save failed')
    } catch (error) {
      console.error('Error saving characteristics:', error)
      throw error
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
  async loadConfigurableCharacteristics(productId: string): Promise<any[]> {
    try {
      const result = await this.api.get(`/products/${productId}/configurable-characteristics`)
      if (result.success && result.data) {
        return result.data.configurable_characteristics || []
      }
      return []
    } catch (error) {
      console.error('Error loading configurable characteristics:', error)
      return []
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
  async saveConfigurableCharacteristics(productId: string, _configurableCharacteristics: any[]): Promise<void> {
    try {
      const result = await this.api.post(`/products/${productId}/configurable-characteristics`, { configurableCharacteristics: _configurableCharacteristics })
      if (!result.success) throw new Error(result.error || 'Configurable characteristics save failed')
    } catch (error) {
      console.error('Error saving configurable characteristics:', error)
      throw error
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
  async loadProductSelectionTables(productId: string): Promise<any> {
    try {
      const result = await this.api.get(`/products/${productId}/selection-tables`)
      return result.success ? result.data : {}
    } catch (error) {
      console.error('Error loading product selection tables:', error)
      return {}
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
  async saveProductSelectionTables(productId: string, tables: any): Promise<void> {
    try {
      console.log('üíæ Tables object keys:', Object.keys(tables || {}))
      console.log('üíæ Tables object is empty:', Object.keys(tables || {}).length === 0)
      const result = await this.api.put(`/products/${productId}/selection-tables`, { tables })
      if (!result.success) throw new Error(result.error || 'Product selection tables save failed')
    } catch (error) {
      console.error('Error saving product selection tables:', error)
      throw error
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (legacy - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π endpoint)
  async loadNewProductSelectionTables(productId: string): Promise<any> {
    return this.loadProductSelectionTables(productId)
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (legacy - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π endpoint)
  async saveNewProductSelectionTables(productId: string, tables: any): Promise<void> {
    return this.saveProductSelectionTables(productId, tables)
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (legacy - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π endpoint)
  async loadExistingProductSelectionTables(productId: string): Promise<any> {
    return this.loadProductSelectionTables(productId)
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ–¥–±–æ—Ä–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (legacy - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π endpoint)
  async saveExistingProductSelectionTables(productId: string, tables: any): Promise<void> {
    return this.saveProductSelectionTables(productId, tables)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  async getOrCreateProductVariant(productId: string): Promise<any> {
    try {
      const result = await this.api.post(`/products/${productId}/variant`, {})
      return result.success ? result.data : null
    } catch (error) {
      console.error('Error getting or creating product variant:', error)
      throw error
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async loadReferenceData(): Promise<{
    categories: ProductCategory[]
    manufacturers: ProductManufacturer[]
    modelLines: ProductModelLine[]
  }> {
    try {
      const [categories, manufacturers, modelLines] = await Promise.all([
        this.api.get('/categories'),
        this.api.get('/manufacturers'),
        this.api.get('/model-lines')
      ])

      return {
        categories: categories.success ? categories.data : [],
        manufacturers: manufacturers.success ? manufacturers.data : [],
        modelLines: modelLines.success ? modelLines.data : []
      }
    } catch (error) {
      console.error('Error loading reference data:', error)
      return { categories: [], manufacturers: [], modelLines: [] }
    }
  }

  // –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  async batchUpdateProducts(updates: Array<{ id: string; data: Partial<ProductFormData> }>): Promise<void> {
    try {
      const requests = updates.map(update =>
        () => this.api.put(`/products/${update.id}`, update.data)
      )
      await this.api.batch(requests)
    } catch (error) {
      console.error('Error in batch update:', error)
      throw error
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  async deleteProduct(productId: string): Promise<void> {
    try {
      const result = await this.api.delete(`/products/${productId}`)
      if (!result.success) throw new Error(result.error || 'Delete failed')
    } catch (error) {
      console.error('Error deleting product:', error)
      throw error
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  async loadProducts(filters?: {
    category?: string
    manufacturer?: string
    search?: string
    page?: number
    limit?: number
  }): Promise<{ products: any[]; total: number; page: number; limit: number }> {
    try {
      const queryParams = new URLSearchParams()
      if (filters?.category) queryParams.append('category', filters.category)
      if (filters?.manufacturer) queryParams.append('manufacturer', filters.manufacturer)
      if (filters?.search) queryParams.append('search', filters.search)
      if (filters?.page) queryParams.append('page', filters.page.toString())
      if (filters?.limit) queryParams.append('limit', filters.limit.toString())

      const result = await this.api.get(`/products?${queryParams.toString()}`)
      return result.success ? result.data : { products: [], total: 0, page: 1, limit: 20 }
    } catch (error) {
      console.error('Error loading products:', error)
      return { products: [], total: 0, page: 1, limit: 20 }
    }
  }
}