const { Pool } = require('pg');

require('dotenv').config({ path: '.env.local' })
require('dotenv').config({ path: 'database.env' })
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || `postgresql://${process.env.POSTGRESQL_USER || 'postgres'}:${encodeURIComponent(process.env.POSTGRESQL_PASSWORD || '')}@${process.env.POSTGRESQL_HOST || 'localhost'}:${process.env.POSTGRESQL_PORT || 5432}/${process.env.POSTGRESQL_DBNAME || 'default_db'}`,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function migrateCharacteristicsToEnums() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ product_characteristics
    const characteristicsQuery = `
      SELECT DISTINCT
        group_id,
        value_text,
        sg.name as group_name
      FROM product_characteristics pc
      JOIN spec_groups sg ON pc.group_id = sg.id
      WHERE pc.value_text IS NOT NULL
        AND pc.value_text != ''
        AND pc.group_id IN (224, 253, 254, 255, 256, 257)
      ORDER BY group_id, value_text
    `;

    const characteristicsResult = await pool.query(characteristicsQuery);
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ enum –∑–Ω–∞—á–µ–Ω–∏—è
    const existingEnumsQuery = `
      SELECT group_id, value, display_name
      FROM spec_enums
      WHERE group_id IN (224, 253, 254, 255, 256, 257)
    `;

    const existingEnumsResult = await pool.query(existingEnumsQuery);
    const existingEnums = new Set();

    existingEnumsResult.rows.forEach(row => {
      existingEnums.add(`${row.group_id}:${row.value}`);
      existingEnums.add(`${row.group_id}:${row.display_name}`);
    });
    let addedCount = 0;
    let skippedCount = 0;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ group_id
    const groupedCharacteristics = {};
    characteristicsResult.rows.forEach(row => {
      if (!groupedCharacteristics[row.group_id]) {
        groupedCharacteristics[row.group_id] = {
          group_name: row.group_name,
          values: []
        };
      }
      groupedCharacteristics[row.group_id].values.push(row.value_text);
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
    for (const [groupId, groupData] of Object.entries(groupedCharacteristics)) {
      // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ordering –¥–ª—è –≥—Ä—É–ø–ø—ã
      const maxOrderingResult = await pool.query(
        'SELECT COALESCE(MAX(ordering), 0) as max_ordering FROM spec_enums WHERE group_id = $1',
        [groupId]
      );
      let groupOrderIndex = maxOrderingResult.rows[0].max_ordering + 1;

      for (const valueText of groupData.values) {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const normalizedValue = valueText.toLowerCase().trim();
        const enumKey = `${groupId}:${normalizedValue}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const exists = existingEnums.has(enumKey) ||
                      existingEnums.has(`${groupId}:${valueText}`) ||
                      Array.from(existingEnums).some(key =>
                        key.startsWith(`${groupId}:`) &&
                        key.toLowerCase().includes(normalizedValue.substring(0, 10))
                      );

        if (exists) {
          skippedCount++;
          continue;
        }

        try {
          // –°–æ–∑–¥–∞–µ–º value –∏–∑ display_name (—É–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
          const cleanValue = normalizedValue
            .replace(/[^a-zA-Z0-9–∞-—è—ë\s\-]/gi, '_')
            .replace(/\s+/g, '_')
            .replace(/_+/g, '_')
            .replace(/^_|_$/g, '')
            .substring(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

          // –°–æ–∑–¥–∞–µ–º enum –∑–Ω–∞—á–µ–Ω–∏–µ
          const insertResult = await pool.query(`
            INSERT INTO spec_enums (
              group_id,
              value,
              display_name,
              ordering,
              is_active,
              created_at,
              updated_at
            ) VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            RETURNING id
          `, [
            groupId,
            cleanValue,
            valueText, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ display_name
            groupOrderIndex++,
            true
          ]);
          addedCount++;

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ set –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
          existingEnums.add(`${groupId}:${normalizedValue}`);
          existingEnums.add(`${groupId}:${valueText}`);

        } catch (error) {
        }
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalCountQuery = `
      SELECT
        sg.name as group_name,
        COUNT(se.id) as enum_count
      FROM spec_groups sg
      LEFT JOIN spec_enums se ON sg.id = se.group_id
      WHERE sg.id IN (224, 253, 254, 255, 256, 257)
      GROUP BY sg.id, sg.name
      ORDER BY sg.id
    `;

    const finalCountResult = await pool.query(finalCountQuery);
    finalCountResult.rows.forEach(row => {
    });
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateCharacteristicsToEnums();