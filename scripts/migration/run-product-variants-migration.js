const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' })
require('dotenv').config({ path: 'database.env' })

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || `postgresql://${process.env.POSTGRESQL_USER || 'postgres'}:${encodeURIComponent(process.env.POSTGRESQL_PASSWORD || '')}@${process.env.POSTGRESQL_HOST || 'localhost'}:${process.env.POSTGRESQL_PORT || 5432}/${process.env.POSTGRESQL_DBNAME || 'default_db'}`,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function runMigration() {
  const client = await pool.connect();
  
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤...\n');
    
    // –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    const sqlScript = fs.readFileSync(
      path.join(__dirname, 'create-product-variants-system.sql'), 
      'utf8'
    );
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await client.query('BEGIN');
    
    console.log('üìã –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç...');
    await client.query(sqlScript);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const tablesCheck = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN (
        'product_variants', 
        'variant_attribute_types', 
        'variant_attribute_values',
        'variant_characteristics',
        'variant_images',
        'variant_price_tiers'
      )
      ORDER BY table_name
    `);
    
    console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:');
    tablesCheck.rows.forEach(row => {
      console.log(`   - ${row.table_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    const variantsCount = await client.query(
      'SELECT COUNT(*) as count FROM product_variants'
    );
    
    console.log(`\nüìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${variantsCount.rows[0].count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    const viewsCheck = await client.query(`
      SELECT viewname 
      FROM pg_views 
      WHERE schemaname = 'public' 
      AND viewname = 'v_product_variants_full'
    `);
    
    if (viewsCheck.rows.length > 0) {
      console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: v_product_variants_full');
    }
    
    await client.query('COMMIT');
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    const examples = await client.query(`
      SELECT 
        pv.id,
        pv.name,
        pv.sku,
        pv.attributes,
        p.name as master_product
      FROM product_variants pv
      JOIN products p ON pv.master_id = p.id
      WHERE pv.is_active = true
      LIMIT 5
    `);
    
    if (examples.rows.length > 0) {
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:');
      examples.rows.forEach(variant => {
        console.log(`\n   ID: ${variant.id}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${variant.name}`);
        console.log(`   –¢–æ–≤–∞—Ä: ${variant.master_product}`);
        console.log(`   SKU: ${variant.sku || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –ê—Ç—Ä–∏–±—É—Ç—ã: ${JSON.stringify(variant.attributes)}`);
      });
    }
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error('\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    process.exit(1);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runMigration().catch(console.error);