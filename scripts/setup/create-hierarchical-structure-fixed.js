const { Pool } = require('pg');

const pool = new Pool({
  user: process.env.POSTGRESQL_USER || process.env.PGUSER || 'postgres',
  host: process.env.POSTGRESQL_HOST || process.env.PGHOST || 'localhost',
  database: process.env.POSTGRESQL_DBNAME || process.env.PGDATABASE || 'medsip_db',
  password: process.env.POSTGRESQL_PASSWORD || process.env.PGPASSWORD,
  port: parseInt(process.env.POSTGRESQL_PORT || process.env.PGPORT || '5432'),
  ssl: { rejectUnauthorized: false }
});

async function createHierarchicalStructureFixed() {
  try {
    const client = await pool.connect();
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      const existingMainGroups = await client.query(`
        SELECT id, name FROM spec_groups
        WHERE name IN ('–ü–†–û–¢–ï–ó–´', '–†–ê–ó–ú–ï–†–´', '–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò')
      `);

      const mainGroupIds = {};
      existingMainGroups.rows.forEach(row => {
        mainGroupIds[row.name] = row.id;
      });

      console.log('üìã –ù–∞–π–¥–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã:', Object.keys(mainGroupIds));

      // –°–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
      const sizeSubgroupMappings = [
        {
          newName: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–≥—Ä—É–ø–ø–∞)',
          description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤',
          parent: '–†–ê–ó–ú–ï–†–´',
          ordering: 210,
          children: [
            { newName: '–†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã (–≥—Ä—É–ø–ø–∞)', oldName: '–†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã' },
            { newName: '–†–∞–∑–º–µ—Ä—ã –æ–±—É–≤–∏ (–≥—Ä—É–ø–ø–∞)', oldName: '–†–∞–∑–º–µ—Ä—ã –æ–±—É–≤–∏ EU' }
          ]
        },
        {
          newName: '–¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–≥—Ä—É–ø–ø–∞)',
          description: '–†–∞–∑–º–µ—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö',
          parent: '–†–ê–ó–ú–ï–†–´',
          ordering: 220,
          children: [
            { newName: '–†–∞–∑–º–µ—Ä—ã –¥–ª–∏–Ω—ã (–≥—Ä—É–ø–ø–∞)', oldName: '–†–∞–∑–º–µ—Ä—ã –¥–ª–∏–Ω—ã (—Å–º)' },
            { newName: '–†–∞–∑–º–µ—Ä—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ (–≥—Ä—É–ø–ø–∞)', oldName: '–†–∞–∑–º–µ—Ä—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ (—Å–º)' }
          ]
        }
      ];

      const createdSubgroups = {};

      // –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø –ø—Ä–æ—Ç–µ–∑–æ–≤
      const existingProstheticGroups = await client.query(`
        SELECT id, name FROM spec_groups
        WHERE name LIKE '%–ø—Ä–æ—Ç–µ–∑%' OR name LIKE '%–ü—Ä–æ—Ç–µ–∑%' OR name LIKE '%–ê–º–ø—É—Ç–∞—Ü–∏%' OR name LIKE '%–ö—Ä–µ–ø–ª–µ–Ω–∏%'
      `);

      existingProstheticGroups.rows.forEach(row => {
        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–µ–Ω–∞ —Å –Ω–æ–≤—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
        if (row.name.includes('—Ä—É–∫ - –î–µ—Ç—Å–∫–∏–µ')) createdSubgroups['–î–µ—Ç—Å–∫–∏–µ –ø—Ä–æ—Ç–µ–∑—ã —Ä—É–∫'] = row.id;
        if (row.name.includes('—Ä—É–∫ - –í–∑—Ä–æ—Å–ª—ã–µ')) createdSubgroups['–í–∑—Ä–æ—Å–ª—ã–µ –ø—Ä–æ—Ç–µ–∑—ã —Ä—É–∫'] = row.id;
        if (row.name.includes('—Ä—É–∫ - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ')) createdSubgroups['–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–µ–∑—ã —Ä—É–∫'] = row.id;
        if (row.name.includes('–Ω–æ–≥ - –î–µ—Ç—Å–∫–∏–µ')) createdSubgroups['–î–µ—Ç—Å–∫–∏–µ –ø—Ä–æ—Ç–µ–∑—ã –Ω–æ–≥'] = row.id;
        if (row.name.includes('–Ω–æ–≥ - –ñ–µ–Ω—Å–∫–∏–µ')) createdSubgroups['–ñ–µ–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–µ–∑—ã –Ω–æ–≥'] = row.id;
        if (row.name.includes('–Ω–æ–≥ - –ú—É–∂—Å–∫–∏–µ')) createdSubgroups['–ú—É–∂—Å–∫–∏–µ –ø—Ä–æ—Ç–µ–∑—ã –Ω–æ–≥'] = row.id;
        if (row.name.includes('—Å—Ç–æ–ø - –î–µ—Ç—Å–∫–∏–µ')) createdSubgroups['–î–µ—Ç—Å–∫–∏–µ –ø—Ä–æ—Ç–µ–∑—ã —Å—Ç–æ–ø'] = row.id;
        if (row.name.includes('—Å—Ç–æ–ø - –ñ–µ–Ω—Å–∫–∏–µ')) createdSubgroups['–ñ–µ–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–µ–∑—ã —Å—Ç–æ–ø'] = row.id;
        if (row.name.includes('—Å—Ç–æ–ø - –ú—É–∂—Å–∫–∏–µ')) createdSubgroups['–ú—É–∂—Å–∫–∏–µ –ø—Ä–æ—Ç–µ–∑—ã —Å—Ç–æ–ø'] = row.id;
        if (row.name.includes('–í–µ—Ä—Ö–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏')) createdSubgroups['–ê–º–ø—É—Ç–∞—Ü–∏–∏ –≤–µ—Ä—Ö–Ω–∏—Ö –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π'] = row.id;
        if (row.name.includes('–ù–∏–∂–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏')) createdSubgroups['–ê–º–ø—É—Ç–∞—Ü–∏–∏ –Ω–∏–∂–Ω–∏—Ö –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π'] = row.id;
        if (row.name.includes('–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ')) createdSubgroups['–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫—Ä–µ–ø–ª–µ–Ω–∏—è'] = row.id;
        if (row.name.includes('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ')) createdSubgroups['–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫—Ä–µ–ø–ª–µ–Ω–∏—è'] = row.id;
      });

      // –°–æ–∑–¥–∞—ë–º –ø–æ–¥–≥—Ä—É–ø–ø—ã —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      for (const mainGroup of sizeSubgroupMappings) {
        if (mainGroupIds[mainGroup.parent]) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
          const existingGroup = await client.query(`
            SELECT id FROM spec_groups WHERE name = $1
          `, [mainGroup.newName]);

          let parentGroupId;
          if (existingGroup.rows.length > 0) {
            parentGroupId = existingGroup.rows[0].id;
          } else {
            const parentResult = await client.query(`
              INSERT INTO spec_groups (name, description, ordering, is_active, created_at, updated_at, parent_id)
              VALUES ($1, $2, $3, true, NOW(), NOW(), $4)
              RETURNING id
            `, [mainGroup.newName, mainGroup.description, mainGroup.ordering, mainGroupIds[mainGroup.parent]]);

            parentGroupId = parentResult.rows[0].id;
          }

          // –°–æ–∑–¥–∞—ë–º –¥–æ—á–µ—Ä–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
          for (const child of mainGroup.children) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ—á–µ—Ä–Ω—è—è –≥—Ä—É–ø–ø–∞
            const existingChild = await client.query(`
              SELECT id FROM spec_groups WHERE name = $1
            `, [child.newName]);

            let childGroupId;
            if (existingChild.rows.length > 0) {
              childGroupId = existingChild.rows[0].id;
            } else {
              const childResult = await client.query(`
                INSERT INTO spec_groups (name, description, ordering, is_active, created_at, updated_at, parent_id)
                VALUES ($1, $2, $3, true, NOW(), NOW(), $4)
                RETURNING id
              `, [child.newName, '–ì—Ä—É–ø–ø–∞ —Ä–∞–∑–º–µ—Ä–æ–≤', parentGroupId + 1, parentGroupId]);

              childGroupId = childResult.rows[0].id;
            }

            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É –ø–æ–¥ –Ω–æ–≤—É—é –¥–æ—á–µ—Ä–Ω—é—é –≥—Ä—É–ø–ø—É
            const moveResult = await client.query(`
              UPDATE spec_groups
              SET parent_id = $1, updated_at = NOW()
              WHERE name = $2
              RETURNING id
            `, [childGroupId, child.oldName]);

            if (moveResult.rows.length > 0) {
            }
          }
        }
      }

      // –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      if (mainGroupIds['–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò']) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        const existingCharGroup = await client.query(`
          SELECT id FROM spec_groups WHERE name = '–û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–≥—Ä—É–ø–ø–∞)'
        `);

        let charGroupId;
        if (existingCharGroup.rows.length > 0) {
          charGroupId = existingCharGroup.rows[0].id;
        } else {
          const characteristicGroup = await client.query(`
            INSERT INTO spec_groups (name, description, ordering, is_active, created_at, updated_at, parent_id)
            VALUES ($1, $2, $3, true, NOW(), NOW(), $4)
            RETURNING id
          `, ['–û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–≥—Ä—É–ø–ø–∞)', '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ü–≤–µ—Ç–∞', 310, mainGroupIds['–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò']]);

          charGroupId = characteristicGroup.rows[0].id;
        }

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const characteristics = ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–§—É–Ω–∫—Ü–∏–∏', '–¶–≤–µ—Ç–∞'];
        for (const char of characteristics) {
          await client.query(`
            UPDATE spec_groups
            SET parent_id = $1, updated_at = NOW()
            WHERE name = $2
          `, [charGroupId, char]);
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parent_id –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—Ä–æ—Ç–µ–∑–æ–≤
      if (mainGroupIds['–ü–†–û–¢–ï–ó–´']) {
        // –ù–∞—Ö–æ–¥–∏–º –∏ —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Ç–µ–∑–æ–≤
        const prostheticMainGroups = [
          { name: '–ü—Ä–æ—Ç–µ–∑—ã —Ä—É–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)', existingPattern: '—Ä—É–∫ -' },
          { name: '–ü—Ä–æ—Ç–µ–∑—ã –Ω–æ–≥ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)', existingPattern: '–Ω–æ–≥ -' },
          { name: '–ü—Ä–æ—Ç–µ–∑—ã —Å—Ç–æ–ø (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)', existingPattern: '—Å—Ç–æ–ø -' },
          { name: '–ê–º–ø—É—Ç–∞—Ü–∏–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)', existingPattern: '–ê–º–ø—É—Ç–∞—Ü–∏–∏ -' },
          { name: '–ö—Ä–µ–ø–ª–µ–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)', existingPattern: '–ö—Ä–µ–ø–ª–µ–Ω–∏—è -' }
        ];

        for (const mainGroup of prostheticMainGroups) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞
          const existingMain = await client.query(`
            SELECT id FROM spec_groups WHERE name = $1
          `, [mainGroup.name]);

          let mainGroupId;
          if (existingMain.rows.length > 0) {
            mainGroupId = existingMain.rows[0].id;
          } else {
            const result = await client.query(`
              INSERT INTO spec_groups (name, description, ordering, is_active, created_at, updated_at, parent_id)
              VALUES ($1, $2, $3, true, NOW(), NOW(), $4)
              RETURNING id
            `, [mainGroup.name, `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${mainGroup.name.toLowerCase()}`, 110, mainGroupIds['–ü–†–û–¢–ï–ó–´']]);

            mainGroupId = result.rows[0].id;
          }

          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
          await client.query(`
            UPDATE spec_groups
            SET parent_id = $1, updated_at = NOW()
            WHERE name LIKE $2 AND parent_id IS NULL
          `, [mainGroupId, `%${mainGroup.existingPattern}%`]);
        }
      }
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const hierarchyResult = await client.query(`
        WITH RECURSIVE hierarchy AS (
          SELECT id, name, description, parent_id, 0 as level, ARRAY[ordering, id] as path
          FROM spec_groups
          WHERE parent_id IS NULL

          UNION ALL

          SELECT sg.id, sg.name, sg.description, sg.parent_id, h.level + 1, h.path || ARRAY[sg.ordering, sg.id]
          FROM spec_groups sg
          JOIN hierarchy h ON sg.parent_id = h.id
        )
        SELECT id, name, description, level,
               (SELECT COUNT(*) FROM spec_enums WHERE group_id = hierarchy.id) as enum_count
        FROM hierarchy
        ORDER BY path
      `);
      hierarchyResult.rows.forEach(row => {
        const indent = '  '.repeat(row.level);
        const prefix = row.level === 0 ? 'üìÅ' : row.level === 1 ? 'üìÇ' : 'üìÑ';
        const enumInfo = row.enum_count > 0 ? ` (${row.enum_count} —Ä–∞–∑–º–µ—Ä–æ–≤)` : '';
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
  } finally {
    await pool.end();
  }
}

createHierarchicalStructureFixed().catch(console.error);