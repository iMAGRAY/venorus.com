const { Client } = require('pg');
const bcrypt = require('bcrypt');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../../.env.local') });

const BCRYPT_ROUNDS = 12;

async function createTestUser() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const tablesCheck = await client.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name IN ('users', 'roles')
    `);

    if (tablesCheck.rows.length < 2) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü—ã users –∏–ª–∏ roles –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏
    const existingRoles = await client.query('SELECT id, name, display_name, permissions FROM roles ORDER BY id');
    
    if (existingRoles.rows.length === 0) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏...');
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
      const roles = [
        {
          name: 'super_admin',
          display_name: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
          permissions: ['*']
        },
        {
          name: 'admin',
          display_name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —à–∏—Ä–æ–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏',
          permissions: [
            'products.*', 'categories.*', 'users.manage', 'media.*', 
            'warehouse.*', 'orders.*', 'reports.*'
          ]
        },
        {
          name: 'manager',
          display_name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
          description: '–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∑–∞–∫–∞–∑–æ–≤',
          permissions: [
            'products.read', 'products.create', 'products.update',
            'categories.read', 'media.upload', 'orders.*'
          ]
        },
        {
          name: 'editor',
          display_name: '–†–µ–¥–∞–∫—Ç–æ—Ä',
          description: '–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
          permissions: [
            'products.read', 'products.update', 'categories.read', 'media.upload'
          ]
        }
      ];

      for (const role of roles) {
        await client.query(`
          INSERT INTO roles (name, display_name, description, permissions, is_active, created_at, updated_at)
          VALUES ($1, $2, $3, $4, true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        `, [role.name, role.display_name, role.description, role.permissions]);
        console.log(`   ‚úì –†–æ–ª—å "${role.display_name}" —Å–æ–∑–¥–∞–Ω–∞`);
      }
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏:');
      existingRoles.rows.forEach(role => {
        console.log(`   - ${role.display_name} (${role.name})`);
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const superAdminRole = await client.query(`
      SELECT id FROM roles WHERE name = 'super_admin' LIMIT 1
    `);

    if (superAdminRole.rows.length === 0) {
      console.log('‚ùå –†–æ–ª—å super_admin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const roleId = superAdminRole.rows[0].id;

    // –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      username: 'test_admin',
      email: 'test@venorus.local',
      password: 'Test123!@#',
      firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await client.query(`
      SELECT id, username, email FROM users WHERE username = $1 OR email = $2
    `, [testUser.username, testUser.email]);

    if (existingUser.rows.length > 0) {
      console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      existingUser.rows.forEach(user => {
        console.log(`   - ${user.username} (${user.email})`);
      });
      
      // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—Ç–∏–º –ª–∏ –º—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
      const readline = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout
      });

      const answer = await new Promise(resolve => {
        readline.question('–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (y/N): ', resolve);
      });
      readline.close();

      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return;
      }

      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await client.query('DELETE FROM users WHERE username = $1 OR email = $2', [testUser.username, testUser.email]);
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await bcrypt.hash(testUser.password, BCRYPT_ROUNDS);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createUserResult = await client.query(`
      INSERT INTO users (
        username, email, password_hash, role_id,
        first_name, last_name, status, email_verified,
        created_at, updated_at
      ) VALUES ($1, $2, $3, $4, $5, $6, 'active', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
      RETURNING id, username, email, created_at
    `, [
      testUser.username, testUser.email, passwordHash, roleId,
      testUser.firstName, testUser.lastName
    ]);

    const newUser = createUserResult.rows[0];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ audit log
    await client.query(`
      INSERT INTO user_audit_log (
        user_id, action, resource_type, resource_id,
        details, created_at
      ) VALUES ($1, 'user_created', 'user', $2, $3, CURRENT_TIMESTAMP)
    `, [
      newUser.id, newUser.id,
      JSON.stringify({
        username: newUser.username,
        email: newUser.email,
        role: 'super_admin',
        created_by: 'test_script',
        timestamp: new Date().toISOString()
      })
    ]);

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('==========================================');
    console.log(`ID: ${newUser.id}`);
    console.log(`–õ–æ–≥–∏–Ω: ${testUser.username}`);
    console.log(`–ü–∞—Ä–æ–ª—å: ${testUser.password}`);
    console.log(`Email: ${testUser.email}`);
    console.log(`–†–æ–ª—å: –°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`);
    console.log('==========================================');
    console.log('URL –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: http://localhost:3000/admin');
    console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...');
    try {
      const permissionTest = await client.query(`
        SELECT user_has_permission($1, 'products.create') as can_create_products,
               user_has_permission($1, 'users.manage') as can_manage_users,
               user_has_permission($1, 'admin.settings') as can_manage_settings
      `, [newUser.id]);

      const perms = permissionTest.rows[0];
      console.log(`   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: ${perms.can_create_products ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: ${perms.can_manage_users ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã: ${perms.can_manage_settings ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ (—Ñ—É–Ω–∫—Ü–∏—è user_has_permission –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createTestUser();
}

module.exports = createTestUser;