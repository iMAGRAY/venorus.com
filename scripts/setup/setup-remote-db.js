const { Pool } = require('pg');
const fs = require('fs');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ –∏–∑ .env.local
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || `postgresql://${process.env.POSTGRESQL_USER || 'postgres'}:${encodeURIComponent(process.env.POSTGRESQL_PASSWORD || '')}@${process.env.POSTGRESQL_HOST || 'localhost'}:${process.env.POSTGRESQL_PORT || 5432}/${process.env.POSTGRESQL_DBNAME || 'medsip_protez'}`,
  ssl: false
});

async function setupRemoteDatabase() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await pool.query('SELECT 1');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await pool.query(`
      SELECT tablename FROM pg_catalog.pg_tables
      WHERE schemaname = 'public'
      ORDER BY tablename
    `);

    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', tablesResult.rows.map(r => r.tablename));

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É manufacturers –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const manufacturersExists = tablesResult.rows.some(r => r.tablename === 'manufacturers');

    if (!manufacturersExists) {
      const createManufacturersSQL = `
        CREATE TABLE manufacturers (
          id SERIAL PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          logo_url TEXT,
          website_url TEXT,
          country VARCHAR(100),
          founded_year INTEGER,
          is_active BOOLEAN NOT NULL DEFAULT true,
          sort_order INTEGER DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        CREATE INDEX idx_manufacturers_name ON manufacturers(name);
        CREATE INDEX idx_manufacturers_country ON manufacturers(country);
        CREATE INDEX idx_manufacturers_active ON manufacturers(is_active);
      `;

      await pool.query(createManufacturersSQL);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
      const insertManufacturersSQL = `
        INSERT INTO manufacturers (name, description, country, founded_year, is_active, sort_order) VALUES
        ('–ú–µ–¥–°–ò–ü', '–†–æ—Å—Å–∏–π—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–µ–∑–æ–≤ –∏ –æ—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π', '–†–æ—Å—Å–∏—è', 2015, true, 1),
        ('OttoBock', '–ù–µ–º–µ—Ü–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –º–∏—Ä–æ–≤–æ–π –ª–∏–¥–µ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏—è', '–ì–µ—Ä–º–∞–Ω–∏—è', 1919, true, 2),
        ('√ñssur', '–ò—Å–ª–∞–Ω–¥—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –ø—Ä–æ—Ç–µ–∑–∞—Ö –∏ –æ—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö', '–ò—Å–ª–∞–Ω–¥–∏—è', 1971, true, 3),
        ('Blatchford', '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å –±–æ–ª–µ–µ —á–µ–º —Å—Ç–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏', '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 1890, true, 4)
      `;

      await pool.query(insertManufacturersSQL);
    } else {
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ manufacturer_id –≤ model_lines
    const modelLinesColumns = await pool.query(`
      SELECT column_name FROM information_schema.columns
      WHERE table_name = 'model_lines' AND table_schema = 'public'
    `);

    const hasManufacturerId = modelLinesColumns.rows.some(r => r.column_name === 'manufacturer_id');

    if (!hasManufacturerId) {
      await pool.query(`
        ALTER TABLE model_lines
        ADD COLUMN manufacturer_id INTEGER,
        ADD CONSTRAINT fk_model_lines_manufacturer
        FOREIGN KEY (manufacturer_id) REFERENCES manufacturers(id)
      `);
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª—å–Ω—ã–µ —Ä—è–¥—ã –∫ –ú–µ–¥–°–ò–ü (id=1)
      await pool.query(`
        UPDATE model_lines
        SET manufacturer_id = 1
        WHERE manufacturer_id IS NULL
      `);
    } else {
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const manufacturersCount = await pool.query('SELECT COUNT(*) FROM manufacturers');
    const modelLinesCount = await pool.query('SELECT COUNT(*) FROM model_lines WHERE manufacturer_id IS NOT NULL');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
    console.error(error);
  } finally {
    await pool.end();
  }
}

setupRemoteDatabase();