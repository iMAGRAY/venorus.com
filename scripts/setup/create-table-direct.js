const { Pool } = require('pg');

// –ü—Ä—è–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const pool = new Pool({
  host: process.env.POSTGRESQL_HOST || process.env.PGHOST || 'localhost',
  port: parseInt(process.env.POSTGRESQL_PORT || process.env.PGPORT || '5432'),
  database: process.env.POSTGRESQL_DBNAME || process.env.PGDATABASE || 'medsip_db',
  user: process.env.POSTGRESQL_USER || process.env.PGUSER || 'postgres',
  password: process.env.POSTGRESQL_PASSWORD || process.env.PGPASSWORD,
  ssl: false
});

async function createTable() {
  let client;
  try {
    client = await pool.connect();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const checkResult = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables
        WHERE table_schema = 'public'
        AND table_name = 'form_templates'
      );
    `);

    if (checkResult.rows[0].exists) {
      const countResult = await client.query('SELECT COUNT(*) FROM form_templates');
      return;
    }
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    await client.query(`
      CREATE TABLE form_templates (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        characteristics JSONB NOT NULL DEFAULT '[]',
        is_favorite BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await client.query('CREATE INDEX idx_form_templates_name ON form_templates(name);');
    await client.query('CREATE INDEX idx_form_templates_created_at ON form_templates(created_at);');
    await client.query('CREATE INDEX idx_form_templates_is_favorite ON form_templates(is_favorite);');
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await client.query(`
      INSERT INTO form_templates (name, description, characteristics, is_favorite) VALUES
      ('–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω', '–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ç–µ–∑–∞',
       '[{"id":1,"group_id":1,"characteristic_type":"text","label":"–ú–∞—Ç–µ—Ä–∏–∞–ª","value_text":"–¢–∏—Ç–∞–Ω"}]', false),
      ('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω', '–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
       '[{"id":2,"group_id":1,"characteristic_type":"numeric","label":"–í–µ—Å","value_numeric":150,"unit_id":1}]', true);
    `);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const countResult = await client.query('SELECT COUNT(*) FROM form_templates');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('üìã –î–µ—Ç–∞–ª–∏:', error);
    throw error;
  } finally {
    if (client) {
      client.release();
    }
    await pool.end();
  }
}
createTable()
  .then(() => {
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });