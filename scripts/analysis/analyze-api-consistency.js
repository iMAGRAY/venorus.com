const { Pool } = require('pg');
const fs = require('fs').promises;
const path = require('path');

require('dotenv').config({ path: '.env.local' })
require('dotenv').config({ path: 'database.env' })
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || `postgresql://${process.env.POSTGRESQL_USER || 'postgres'}:${encodeURIComponent(process.env.POSTGRESQL_PASSWORD || '')}@${process.env.POSTGRESQL_HOST || 'localhost'}:${process.env.POSTGRESQL_PORT || 5432}/${process.env.POSTGRESQL_DBNAME || 'default_db'}`,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function analyzeAPIConsistency() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò API –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');
  
  const issues = {
    duplicateSystems: [],
    legacyUsage: [],
    inconsistentAPIs: [],
    emptyTables: [],
    recommendations: []
  };
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–∏—Å—Ç–µ–º
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–∏—Å—Ç–µ–º...');
    
    // –°–∏—Å—Ç–µ–º–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    const variantSystems = await pool.query(`
      SELECT 
        'product_sizes' as table_name,
        COUNT(*) as record_count,
        pg_size_pretty(pg_relation_size('product_sizes')) as table_size
      FROM product_sizes
      UNION ALL
      SELECT 
        'product_variants' as table_name,
        COUNT(*) as record_count,
        pg_size_pretty(pg_relation_size('product_variants')) as table_size
      FROM product_variants
    `);
    
    console.log('\nüìä –°–∏—Å—Ç–µ–º—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤:');
    variantSystems.rows.forEach(row => {
      console.log(`   ${row.table_name}: ${row.record_count} –∑–∞–ø–∏—Å–µ–π (${row.table_size})`);
      if (row.record_count > 0) {
        issues.duplicateSystems.push({
          system: 'variants',
          table: row.table_name,
          records: row.record_count
        });
      }
    });
    
    // –°–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const characteristicSystems = await pool.query(`
      SELECT 
        system,
        COUNT(*) as table_count,
        SUM(record_count) as total_records
      FROM (
        SELECT 'legacy' as system, COUNT(*) as record_count FROM characteristic_groups_legacy
        UNION ALL
        SELECT 'legacy' as system, COUNT(*) as record_count FROM characteristic_values_legacy
        UNION ALL
        SELECT 'simple' as system, COUNT(*) as record_count FROM characteristics_groups_simple
        UNION ALL
        SELECT 'simple' as system, COUNT(*) as record_count FROM characteristics_values_simple
        UNION ALL
        SELECT 'spec' as system, COUNT(*) as record_count FROM spec_groups
        UNION ALL
        SELECT 'spec' as system, COUNT(*) as record_count FROM spec_enums
      ) t
      GROUP BY system
    `);
    
    console.log('\nüìä –°–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:');
    characteristicSystems.rows.forEach(row => {
      console.log(`   ${row.system}: ${row.total_records} –∑–∞–ø–∏—Å–µ–π –≤ ${row.table_count} —Ç–∞–±–ª–∏—Ü–∞—Ö`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è legacy —Ç–∞–±–ª–∏—Ü
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è legacy —Ç–∞–±–ª–∏—Ü...');
    
    const legacyTables = [
      'characteristic_groups_legacy',
      'characteristic_values_legacy',
      'spec_groups',
      'spec_enums'
    ];
    
    for (const table of legacyTables) {
      const usage = await pool.query(`
        SELECT COUNT(*) as count FROM ${table}
      `);
      
      if (usage.rows[0].count > 0) {
        issues.legacyUsage.push({
          table: table,
          records: usage.rows[0].count
        });
      }
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑ API endpoints
    console.log('\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ API endpoints...');
    
    const apiDir = path.join(__dirname, '..', 'app', 'api');
    const apiAnalysis = await analyzeAPIDirectory(apiDir);
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:');
    console.log(`   –í—Å–µ–≥–æ endpoints: ${apiAnalysis.totalEndpoints}`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑—É—é—Ç product_sizes: ${apiAnalysis.usingProductSizes}`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑—É—é—Ç product_variants: ${apiAnalysis.usingProductVariants}`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑—É—é—Ç spec_groups/enums: ${apiAnalysis.usingSpecTables}`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑—É—é—Ç legacy —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${apiAnalysis.usingLegacyChars}`);
    
    // 4. –ü—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    const emptyTablesCheck = await pool.query(`
      SELECT 
        table_name,
        pg_size_pretty(pg_relation_size(table_name::regclass)) as size
      FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_type = 'BASE TABLE'
      AND table_name IN (
        'product_images', 'product_selection_tables', 'warehouse_movements',
        'variant_characteristics_simple', 'product_media_links', 'product_view_stats',
        'suppliers', 'price_logs', 'product_suppliers', 'product_certificates'
      )
      AND NOT EXISTS (
        SELECT 1 FROM information_schema.tables t2
        WHERE t2.table_name = information_schema.tables.table_name || '_pkey'
      )
    `);
    
    // 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    
    if (issues.duplicateSystems.some(s => s.system === 'variants')) {
      console.log('üî∏ –í–ê–†–ò–ê–ù–¢–´ –¢–û–í–ê–†–û–í:');
      console.log('   - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ product_sizes –≤ product_variants');
      console.log('   - –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è product_variants');
      console.log('   - –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É product_sizes –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
      issues.recommendations.push('migrate_variants');
    }
    
    if (issues.legacyUsage.length > 0) {
      console.log('\nüî∏ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:');
      console.log('   - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å legacy —Ç–∞–±–ª–∏—Ü –Ω–∞ simplified —Å–∏—Å—Ç–µ–º—É');
      console.log('   - –û–±–Ω–æ–≤–∏—Ç—å API endpoints –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è characteristics_*_simple');
      console.log('   - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å legacy —Ç–∞–±–ª–∏—Ü—ã');
      issues.recommendations.push('migrate_characteristics');
    }
    
    console.log('\nüî∏ –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   - –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π API v3 —Å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π');
    console.log('   - –í–Ω–µ–¥—Ä–∏—Ç—å —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö endpoints');
    console.log('   - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ API');
    console.log('   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è API');
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const report = {
      timestamp: new Date().toISOString(),
      issues: issues,
      apiAnalysis: apiAnalysis,
      recommendations: generateDetailedRecommendations(issues)
    };
    
    const reportPath = path.join(__dirname, `api-consistency-report-${Date.now()}.json`);
    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    
    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  } finally {
    await pool.end();
  }
}

async function analyzeAPIDirectory(dir) {
  const stats = {
    totalEndpoints: 0,
    usingProductSizes: 0,
    usingProductVariants: 0,
    usingSpecTables: 0,
    usingLegacyChars: 0,
    endpoints: []
  };
  
  try {
    const files = await fs.readdir(dir, { withFileTypes: true });
    
    for (const file of files) {
      const fullPath = path.join(dir, file.name);
      
      if (file.isDirectory()) {
        const subStats = await analyzeAPIDirectory(fullPath);
        stats.totalEndpoints += subStats.totalEndpoints;
        stats.usingProductSizes += subStats.usingProductSizes;
        stats.usingProductVariants += subStats.usingProductVariants;
        stats.usingSpecTables += subStats.usingSpecTables;
        stats.usingLegacyChars += subStats.usingLegacyChars;
        stats.endpoints.push(...subStats.endpoints);
      } else if (file.name === 'route.ts' || file.name === 'route.js') {
        stats.totalEndpoints++;
        
        const content = await fs.readFile(fullPath, 'utf8');
        const endpoint = {
          path: fullPath.replace(/.*\/app\/api/, '/api').replace(/\/route\.(ts|js)$/, ''),
          uses: []
        };
        
        if (content.includes('product_sizes')) {
          stats.usingProductSizes++;
          endpoint.uses.push('product_sizes');
        }
        if (content.includes('product_variants')) {
          stats.usingProductVariants++;
          endpoint.uses.push('product_variants');
        }
        if (content.includes('spec_groups') || content.includes('spec_enums')) {
          stats.usingSpecTables++;
          endpoint.uses.push('spec_tables');
        }
        if (content.includes('characteristic_groups_legacy') || content.includes('characteristic_values_legacy')) {
          stats.usingLegacyChars++;
          endpoint.uses.push('legacy_characteristics');
        }
        
        if (endpoint.uses.length > 0) {
          stats.endpoints.push(endpoint);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', dir, error.message);
  }
  
  return stats;
}

function generateDetailedRecommendations(issues) {
  const recommendations = [];
  
  if (issues.duplicateSystems.some(s => s.system === 'variants')) {
    recommendations.push({
      priority: 'HIGH',
      category: '–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤',
      actions: [
        '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç migrate-sizes-to-variants.js',
        '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ API endpoints –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è product_variants',
        '–û–±–Ω–æ–≤–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
        '–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É product_sizes'
      ]
    });
  }
  
  if (issues.legacyUsage.length > 0) {
    recommendations.push({
      priority: 'HIGH',
      category: '–°–∏—Å—Ç–µ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫',
      actions: [
        '–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ spec_groups/spec_enums –≤ characteristics_*_simple',
        '–û–±–Ω–æ–≤–∏—Ç—å API /api/spec-groups –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü',
        '–û–±–Ω–æ–≤–∏—Ç—å API /api/specifications',
        '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å legacy —Ç–∞–±–ª–∏—Ü—ã'
      ]
    });
  }
  
  recommendations.push({
    priority: 'MEDIUM',
    category: 'API –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å',
    actions: [
      '–°–æ–∑–¥–∞—Ç—å API v3 —Å –µ–¥–∏–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π',
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏–ø—ã –∏–∑ lib/api/types.ts',
      '–î–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      '–í–Ω–µ–¥—Ä–∏—Ç—å –µ–¥–∏–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫'
    ]
  });
  
  recommendations.push({
    priority: 'LOW',
    category: '–û—á–∏—Å—Ç–∫–∞ –ë–î',
    actions: [
      '–£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã',
      '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã',
      '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤',
      '–í–Ω–µ–¥—Ä–∏—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü'
    ]
  });
  
  return recommendations;
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
  analyzeAPIConsistency();
}