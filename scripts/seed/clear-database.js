#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤
 */

const { Pool } = require('pg');
require('dotenv').config({ path: '.env.local' });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  host: process.env.POSTGRESQL_HOST,
  port: parseInt(process.env.POSTGRESQL_PORT),
  database: process.env.POSTGRESQL_DBNAME,
  user: process.env.POSTGRESQL_USER,
  password: decodeURIComponent(process.env.POSTGRESQL_PASSWORD),
  ssl: false,
});

console.log('üóëÔ∏è  –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•');
console.log('============================================================');

async function clearDatabase() {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');

    console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
    await client.query('DELETE FROM product_characteristics_simple');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    
    await client.query('DELETE FROM products');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã');
    
    await client.query('DELETE FROM characteristics_values_simple');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
    
    await client.query('DELETE FROM characteristics_groups_simple');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
    
    await client.query('DELETE FROM product_categories WHERE id >= 1');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    
    await client.query('DELETE FROM manufacturers WHERE id >= 1');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    await client.query('ALTER SEQUENCE products_id_seq RESTART WITH 1');
    await client.query('ALTER SEQUENCE manufacturers_id_seq RESTART WITH 1');
    // await client.query('ALTER SEQUENCE product_categories_id_seq RESTART WITH 1'); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await client.query('ALTER SEQUENCE characteristics_groups_simple_id_seq RESTART WITH 1');
    await client.query('ALTER SEQUENCE characteristics_values_simple_id_seq RESTART WITH 1');
    await client.query('ALTER SEQUENCE product_characteristics_simple_id_seq RESTART WITH 1');
    console.log('   ‚úÖ –°–±—Ä–æ—à–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ ID');

    await client.query('COMMIT');
    console.log('\nüéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –û–ß–ò–©–ï–ù–ê!');
    console.log('============================================================');

  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
    throw error;
  } finally {
    client.release();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  try {
    await clearDatabase();
    console.log('\nüöÄ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

main();