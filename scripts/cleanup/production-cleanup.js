const { Pool } = require('pg');
const fs = require('fs').promises;
const path = require('path');

require('dotenv').config({ path: '.env.local' })
require('dotenv').config({ path: 'database.env' })
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || `postgresql://${process.env.POSTGRESQL_USER || 'postgres'}:${encodeURIComponent(process.env.POSTGRESQL_PASSWORD || '')}@${process.env.POSTGRESQL_HOST || 'localhost'}:${process.env.POSTGRESQL_PORT || 5432}/${process.env.POSTGRESQL_DBNAME || 'default_db'}`,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
const CLEANUP_CONFIG = {
  // –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø—É—Å—Ç—ã–µ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ)
  tablesToDrop: [
    'product_images',           // –ü—É—Å—Ç–∞—è, –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ media_files
    'product_selection_tables', // –ü—É—Å—Ç–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    'warehouse_movements',      // –ü—É—Å—Ç–∞—è, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
    'product_media_links',      // –ü—É—Å—Ç–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    'product_view_stats',       // –ü—É—Å—Ç–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    'suppliers',                // –ü—É—Å—Ç–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    'price_logs',               // –ü—É—Å—Ç–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    'product_suppliers',        // –ü—É—Å—Ç–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    'product_certificates',     // –ü—É—Å—Ç–∞—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  ],
  
  // Backup —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  backupTablesToDrop: [
    'characteristics_consolidated_backup',
    'product_characteristics_new_backup_final',
    'eav_backup_before_cleanup'
  ],
  
  // Legacy —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
  legacyTables: [
    'characteristic_values_legacy',
    'characteristic_groups_legacy'
  ],
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  indexesToReview: [
    'idx_characteristic_groups_is_active',
    'idx_characteristic_groups_is_section',
    'idx_characteristic_values_is_active'
  ]
};

async function createBackup() {
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tablesResult = await pool.query(`
      SELECT 
        table_name,
        pg_get_ddl('CREATE TABLE'::regclass, (quote_ident(table_schema) || '.' || quote_ident(table_name))::regclass) as ddl
      FROM information_schema.tables
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupDir = path.join(__dirname, `backup-${timestamp}`);
    await fs.mkdir(backupDir, { recursive: true });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º DDL –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for (const table of tablesResult.rows) {
      const filePath = path.join(backupDir, `${table.table_name}.sql`);
      await fs.writeFile(filePath, table.ddl);
    }
    
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤: ${backupDir}`);
    return backupDir;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
    throw error;
  }
}

async function dropUnusedTables() {
  console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü...');
  
  for (const table of CLEANUP_CONFIG.tablesToDrop) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞—è
      const countResult = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
      const count = parseInt(countResult.rows[0].count);
      
      if (count === 0) {
        await pool.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
      } else {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ${table} - —Å–æ–¥–µ—Ä–∂–∏—Ç ${count} –∑–∞–ø–∏—Å–µ–π`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${table}:`, error.message);
    }
  }
}

async function dropBackupTables() {
  console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ backup —Ç–∞–±–ª–∏—Ü...');
  
  for (const table of CLEANUP_CONFIG.backupTablesToDrop) {
    try {
      await pool.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ backup —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${table}:`, error.message);
    }
  }
}

async function archiveLegacyTables() {
  console.log('\nüìÅ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è legacy —Ç–∞–±–ª–∏—Ü...');
  
  const archiveSchema = 'archive';
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  await pool.query(`CREATE SCHEMA IF NOT EXISTS ${archiveSchema}`);
  
  for (const table of CLEANUP_CONFIG.legacyTables) {
    try {
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –∞—Ä—Ö–∏–≤–Ω—É—é —Å—Ö–µ–º—É
      await pool.query(`ALTER TABLE ${table} SET SCHEMA ${archiveSchema}`);
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ö–µ–º—É ${archiveSchema}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ ${table}:`, error.message);
    }
  }
}

async function optimizeIndexes() {
  console.log('\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤...');
  
  // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
  const indexUsageResult = await pool.query(`
    SELECT 
      schemaname,
      tablename,
      indexname,
      idx_scan,
      idx_tup_read,
      idx_tup_fetch,
      pg_size_pretty(pg_relation_size(indexrelid)) as index_size
    FROM pg_stat_user_indexes
    WHERE schemaname = 'public'
    AND idx_scan = 0
    ORDER BY pg_relation_size(indexrelid) DESC
  `);
  
  console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${indexUsageResult.rows.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤:`);
  
  for (const idx of indexUsageResult.rows) {
    console.log(`   - ${idx.indexname} –Ω–∞ ${idx.tablename} (—Ä–∞–∑–º–µ—Ä: ${idx.index_size})`);
  }
  
  // VACUUM –∏ ANALYZE –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  console.log('\nüßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VACUUM ANALYZE...');
  await pool.query('VACUUM ANALYZE');
  console.log('‚úÖ VACUUM ANALYZE –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

async function consolidateCharacteristics() {
  console.log('\nüîÑ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
  const usageStats = await pool.query(`
    SELECT 
      'characteristics_simple' as system,
      COUNT(*) as usage_count
    FROM product_characteristics_simple
    UNION ALL
    SELECT 
      'characteristic_templates' as system,
      COUNT(*) as usage_count
    FROM characteristic_templates
  `);
  
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:');
  usageStats.rows.forEach(row => {
    console.log(`   - ${row.system}: ${row.usage_count} –∑–∞–ø–∏—Å–µ–π`);
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É (characteristics_*_simple) –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é');
}

async function generateReport() {
  console.log('\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
  
  const report = {
    timestamp: new Date().toISOString(),
    database: {
      tables: 0,
      totalSize: '',
      indexes: 0,
      views: 0
    },
    cleanup: {
      tablesDropped: [],
      backupTablesDropped: [],
      tablesArchived: [],
      unusedIndexes: []
    },
    recommendations: []
  };
  
  // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const statsResult = await pool.query(`
    SELECT 
      COUNT(DISTINCT table_name) as table_count,
      pg_size_pretty(pg_database_size(current_database())) as db_size,
      COUNT(DISTINCT indexname) as index_count
    FROM information_schema.tables t
    LEFT JOIN pg_indexes i ON t.table_name = i.tablename
    WHERE t.table_schema = 'public'
  `);
  
  const viewsResult = await pool.query(`
    SELECT COUNT(*) as view_count
    FROM information_schema.views
    WHERE table_schema = 'public'
  `);
  
  report.database.tables = statsResult.rows[0].table_count;
  report.database.totalSize = statsResult.rows[0].db_size;
  report.database.indexes = statsResult.rows[0].index_count;
  report.database.views = viewsResult.rows[0].view_count;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportPath = path.join(__dirname, `cleanup-report-${Date.now()}.json`);
  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
  
  console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  return report;
}

async function main() {
  console.log('üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    await createBackup();
    
    // 2. –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    await dropUnusedTables();
    
    // 3. –£–¥–∞–ª—è–µ–º backup —Ç–∞–±–ª–∏—Ü—ã
    await dropBackupTables();
    
    // 4. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º legacy —Ç–∞–±–ª–∏—Ü—ã
    await archiveLegacyTables();
    
    // 5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await optimizeIndexes();
    
    // 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    await consolidateCharacteristics();
    
    // 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = await generateReport();
    
    console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –†–∞–∑–º–µ—Ä –ë–î: ${report.database.totalSize}`);
    console.log(`üìä –¢–∞–±–ª–∏—Ü: ${report.database.tables}`);
    console.log(`üìä –ò–Ω–¥–µ–∫—Å–æ–≤: ${report.database.indexes}`);
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { CLEANUP_CONFIG, createBackup };