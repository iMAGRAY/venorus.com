#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã orders
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
 */

const { Pool } = require('pg')
require('dotenv').config({ path: '.env.local' })
require('dotenv').config({ path: 'database.env' })

function buildPool() {
  const connectionString = process.env.DATABASE_URL || (
    `postgresql://${process.env.POSTGRESQL_USER || 'postgres'}:${encodeURIComponent(process.env.POSTGRESQL_PASSWORD || '')}` +
    `@${process.env.POSTGRESQL_HOST || 'localhost'}:${process.env.POSTGRESQL_PORT || 5432}/${process.env.POSTGRESQL_DBNAME || 'default_db'}`
  )
  const ssl = process.env.NODE_ENV === 'production' || /sslmode=require/.test(connectionString) ? { rejectUnauthorized: false } : false
  return new Pool({ connectionString, ssl })
}

async function executeQuery(query, params = []) {
  const pool = buildPool()
  try {
    const result = await pool.query(query, params)
    return result
  } finally {
    await pool.end()
  }
}

const OPTIMIZATION_QUERIES = [
  // –ò–Ω–¥–µ–∫—Å –Ω–∞ –ø–æ–ª–µ status - —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  {
    name: 'idx_orders_status',
    query: `CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);`,
    description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–æ–≤'
  },
  
  // –ò–Ω–¥–µ–∫—Å –Ω–∞ created_at –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
  {
    name: 'idx_orders_created_at',
    query: `CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at DESC);`,
    description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è'
  },
  
  // –ò–Ω–¥–µ–∫—Å –Ω–∞ updated_at –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  {
    name: 'idx_orders_updated_at',
    query: `CREATE INDEX IF NOT EXISTS idx_orders_updated_at ON orders(updated_at DESC);`,
    description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤'
  },
  
  // –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  {
    name: 'idx_orders_status_created_at',
    query: `CREATE INDEX IF NOT EXISTS idx_orders_status_created_at ON orders(status, created_at DESC);`,
    description: '–°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ'
  },
  
  // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ email –∫–ª–∏–µ–Ω—Ç–∞
  {
    name: 'idx_orders_customer_email',
    query: `CREATE INDEX IF NOT EXISTS idx_orders_customer_email ON orders(customer_email);`,
    description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ email –∫–ª–∏–µ–Ω—Ç–∞'
  },
  
  // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞
  {
    name: 'idx_orders_customer_phone',
    query: `CREATE INDEX IF NOT EXISTS idx_orders_customer_phone ON orders(customer_phone);`,
    description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞'
  }
]

async function optimizeOrdersPerformance() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã orders...')
  
  let successCount = 0
  let errorCount = 0
  
  for (const optimization of OPTIMIZATION_QUERIES) {
    try {
      console.log(`üì¶ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å: ${optimization.name}`)
      console.log(`   ${optimization.description}`)
      
      const startTime = Date.now()
      await executeQuery(optimization.query)
      const duration = Date.now() - startTime
      
      console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å ${optimization.name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms`)
      successCount++
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ ${optimization.name}:`, error.message)
      errorCount++
    }
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:')
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${successCount}`)
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`)
  
  if (successCount > 0) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤...')
    try {
      await executeQuery('ANALYZE orders;')
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error.message)
    }
  }
  
  return { successCount, errorCount }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
async function checkExistingIndexes() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã orders...')
    const result = await executeQuery(`
      SELECT indexname, indexdef 
      FROM pg_indexes 
      WHERE tablename = 'orders' 
      ORDER BY indexname;
    `)
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${result.rows.length}`)
    result.rows.forEach(row => {
      console.log(`   - ${row.indexname}`)
    })
    
    return result.rows
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message)
    return []
  }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async function main() {
  try {
    await checkExistingIndexes()
    console.log('\n' + '='.repeat(50))
    
    const result = await optimizeOrdersPerformance()
    
    console.log('\n' + '='.repeat(50))
    console.log('üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
    if (result.successCount > 0) {
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
      console.log('   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è connection pool')
      console.log('   - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏')
      console.log('   - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã')
    }
    
    process.exit(result.errorCount > 0 ? 1 : 0)
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error.message)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

module.exports = { optimizeOrdersPerformance, checkExistingIndexes }