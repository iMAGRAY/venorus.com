#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ webhook
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ GitHub
 */

const crypto = require('crypto')
const https = require('https')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_URL = 'https://venorus.net/api/webhook/github'
const WEBHOOK_SECRET = 'your-webhook-secret'

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é payload –∫–∞–∫ –æ—Ç GitHub
const payload = JSON.stringify({
  ref: 'refs/heads/main',
  after: '31e8920', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ webpack
  head_commit: {
    id: '31e8920',
    message: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏ webpack –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è',
    author: {
      name: 'Claude Code',
      email: 'noreply@anthropic.com'
    }
  },
  repository: {
    name: 'venorus.com',
    full_name: 'iMAGRAY/venorus.com'
  }
})

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
const signature = crypto
  .createHmac('sha256', WEBHOOK_SECRET)
  .update(payload)
  .digest('hex')

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
const options = {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(payload),
    'X-Hub-Signature-256': `sha256=${signature}`,
    'X-GitHub-Event': 'push',
    'User-Agent': 'GitHub-Hookshot/webhook-trigger'
  }
}

console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...')
console.log(`URL: ${WEBHOOK_URL}`)
console.log(`Payload size: ${Buffer.byteLength(payload)} bytes`)
console.log(`Signature: sha256=${signature}`)

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
const req = https.request(WEBHOOK_URL, options, (res) => {
  console.log(`\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${res.statusCode} ${res.statusMessage}`)
  
  let data = ''
  res.on('data', (chunk) => {
    data += chunk
  })
  
  res.on('end', () => {
    try {
      const response = JSON.parse(data)
      console.log('üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(response, null, 2))
      
      if (res.statusCode === 200) {
        console.log('üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!')
        console.log('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞...')
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')
      }
    } catch (e) {
      console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (raw):', data)
    }
  })
})

req.on('error', (e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message)
})

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload
req.write(payload)
req.end()

console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞...')