import { NextRequest, NextResponse } from 'next/server'
import { exec } from 'child_process'
import { promisify } from 'util'
import { logger } from '@/lib/logger'

const execAsync = promisify(exec)

// –¢–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
const CLEAN_DEPLOY_TOKEN = process.env.CLEAN_DEPLOY_TOKEN || 'clean-deploy-secret-2024'

async function performCleanDeploy(): Promise<{ success: boolean; output: string; error?: string }> {
  try {
    logger.info('üßπ Starting full clean deployment...')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    const { stdout, stderr } = await execAsync('node scripts/deploy/clean-deploy.js', {
      cwd: process.cwd(),
      timeout: 600000 // 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
    })
    
    const output = stdout + (stderr ? `\nSTDERR: ${stderr}` : '')
    logger.info('‚úÖ Clean deployment completed successfully')
    logger.info(output)
    
    return { success: true, output }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    logger.error('‚ùå Clean deployment failed:', errorMessage)
    
    return { 
      success: false, 
      output: '', 
      error: errorMessage 
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization')
    const token = authHeader?.replace('Bearer ', '')
    
    if (token !== CLEAN_DEPLOY_TOKEN) {
      logger.warn('‚ùå Unauthorized clean deploy attempt')
      return NextResponse.json(
        { error: 'Unauthorized' }, 
        { status: 401 }
      )
    }

    logger.info('üßπ Clean deployment requested with valid token')
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    performCleanDeploy().then(result => {
      if (result.success) {
        logger.info('üéâ Clean deployment completed successfully')
      } else {
        logger.error('üí• Clean deployment failed:', result.error)
      }
    })
    
    return NextResponse.json({ 
      message: 'Clean deployment started',
      timestamp: new Date().toISOString(),
      warning: 'This will completely wipe and redeploy the application'
    })
    
  } catch (error) {
    logger.error('‚ùå Clean deploy API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({ 
    message: 'Clean Deploy API Endpoint',
    status: 'active',
    usage: 'POST with Authorization: Bearer <token>',
    warning: 'This will completely wipe and redeploy the application',
    timestamp: new Date().toISOString()
  })
}