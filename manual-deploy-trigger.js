#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç GitHub webhook –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 */

const https = require('https');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const SERVER_HOST = 'venorus.com';
const WEBHOOK_PATH = '/api/webhook/github';
const WEBHOOK_SECRET = 'your-webhook-secret'; // –ò–∑ –∫–æ–¥–∞ webhook

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–π payload GitHub webhook
const mockPayload = {
  ref: 'refs/heads/main',
  head_commit: {
    id: '1234567890abcdef',
    message: 'feat: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ - —Ä—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π',
    author: {
      name: 'Claude Code',
      email: 'noreply@anthropic.com'
    }
  },
  repository: {
    name: 'venorus.com',
    full_name: 'user/venorus.com'
  }
};

function createSignature(payload, secret) {
  return 'sha256=' + crypto
    .createHmac('sha256', secret)
    .update(payload)
    .digest('hex');
}

function sendWebhook() {
  const payloadString = JSON.stringify(mockPayload);
  const signature = createSignature(payloadString, WEBHOOK_SECRET);
  
  const options = {
    hostname: SERVER_HOST,
    port: 443,
    path: WEBHOOK_PATH,
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': payloadString.length,
      'X-Hub-Signature-256': signature,
      'X-GitHub-Event': 'push',
      'User-Agent': 'GitHub-Hookshot/12345'
    },
    rejectUnauthorized: false // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –æ—à–∏–±–∫–∏
  };

  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
  console.log(`URL: https://${SERVER_HOST}${WEBHOOK_PATH}`);
  console.log(`Payload: ${payloadString.substring(0, 100)}...`);

  const req = https.request(options, (res) => {
    let data = '';
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, res.headers);
    
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
      try {
        const response = JSON.parse(data);
        console.log(JSON.stringify(response, null, 2));
        
        if (res.statusCode === 200) {
          console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
          console.log('‚è≥ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ webhook:', response);
        }
      } catch (e) {
        console.log('üìÑ Raw –æ—Ç–≤–µ—Ç:', data);
      }
    });
  });

  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ IP
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ IP...');
    sendWebhookToIP();
  });

  req.write(payloadString);
  req.end();
}

function sendWebhookToIP() {
  const payloadString = JSON.stringify(mockPayload);
  const signature = createSignature(payloadString, WEBHOOK_SECRET);
  
  const options = {
    hostname: '109.73.195.215',
    port: 443,
    path: WEBHOOK_PATH,
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': payloadString.length,
      'X-Hub-Signature-256': signature,
      'X-GitHub-Event': 'push',
      'User-Agent': 'GitHub-Hookshot/12345',
      'Host': 'venorus.com'
    },
    rejectUnauthorized: false
  };

  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –ø–æ IP...');
  
  const req = https.request(options, (res) => {
    let data = '';
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
    
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
    });
  });

  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ IP –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  });

  req.write(payloadString);
  req.end();
}

// –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function testWebhookEndpoint() {
  const options = {
    hostname: '109.73.195.215',
    port: 443,
    path: WEBHOOK_PATH,
    method: 'GET',
    headers: {
      'Host': 'venorus.com'
    },
    rejectUnauthorized: false
  };

  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook endpoint...');
  
  const req = https.request(options, (res) => {
    let data = '';
    
    console.log(`üìä GET –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
    
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      console.log('üì• GET –û—Ç–≤–µ—Ç:', data);
      
      // –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
      setTimeout(sendWebhook, 1000);
    });
  });

  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –¥–µ–ø–ª–æ–π
    setTimeout(sendWebhook, 1000);
  });

  req.end();
}

console.log('üá∑üá∫ MANUAL DEPLOY TRIGGER –¥–ª—è venorus.com');
console.log('============================================');
console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏...');

// –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testWebhookEndpoint();