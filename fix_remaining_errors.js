#!/usr/bin/env node

const fs = require('fs');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
const fixes = [
  {
    file: 'app/api/product-specifications/[id]/route.ts',
    replacements: [
      { from: 'params.id', to: 'resolvedParams.id' },
    ],
    addAwait: true
  },
  {
    file: 'app/api/sql-table/[table]/route.ts', 
    replacements: [
      { from: 'params.table', to: 'resolvedParams.table' },
    ],
    addAwait: true
  },
  {
    file: 'app/api/variants/[id]/tags/route.ts',
    replacements: [
      { from: 'params.id', to: 'resolvedParams.id' },
    ],
    addAwait: true
  },
  {
    file: 'app/api/warehouse/sections/[id]/route.ts',
    replacements: [
      { from: 'params.id', to: 'resolvedParams.id' },
    ],
    addAwait: true
  }
];

fixes.forEach(fix => {
  try {
    console.log(`Fixing ${fix.file}...`);
    let content = fs.readFileSync(fix.file, 'utf8');
    
    // –î–æ–±–∞–≤–∏—Ç—å await params –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (fix.addAwait && !content.includes('resolvedParams = await params')) {
      // –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ params. –∏ –¥–æ–±–∞–≤–∏—Ç—å await –ø–µ—Ä–µ–¥ –Ω–∏–º
      const lines = content.split('\n');
      let added = false;
      
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('params.') && !added) {
          // –ù–∞–π—Ç–∏ –æ—Ç—Å—Ç—É–ø
          const indent = lines[i].match(/^(\s*)/)[1];
          lines.splice(i, 0, `${indent}const resolvedParams = await params`);
          added = true;
          break;
        }
      }
      
      content = lines.join('\n');
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–º–µ–Ω—ã
    fix.replacements.forEach(replacement => {
      content = content.replace(new RegExp(replacement.from, 'g'), replacement.to);
    });
    
    fs.writeFileSync(fix.file, content, 'utf8');
    console.log(`‚úÖ Fixed ${fix.file}`);
  } catch (error) {
    console.error(`‚ùå Error fixing ${fix.file}:`, error.message);
  }
});

console.log('üéâ Manual fixes complete!');