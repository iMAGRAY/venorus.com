#!/usr/bin/env node

/**
 * –¢–ï–°–¢–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ò –°–ï–°–°–ò–ô –î–õ–Ø MEDSIP.PROTEZ
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å–µ—Å—Å–∏–π –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
 * 
 * –ó–∞–ø—É—Å–∫: node tests/integration/auth-session-tests.js
 */

const http = require('http');
const https = require('https');
const { URL } = require('url');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.TEST_URL || 'http://localhost:3009';
const TIMEOUT = 10000;

// –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_CREDENTIALS = {
  admin: {
    username: process.env.TEST_ADMIN_USER || 'admin',
    password: process.env.TEST_ADMIN_PASS || 'admin123'
  },
  invalidUser: {
    username: 'nonexistent_user_' + Date.now(),
    password: 'wrong_password_123'
  }
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
  dim: '\x1b[2m'
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
let testGroups = [];

// –£—Ç–∏–ª–∏—Ç—ã
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(name, status, message = '') {
  const icon = status === 'pass' ? '‚úÖ' : status === 'fail' ? '‚ùå' : '‚è≠Ô∏è';
  const color = status === 'pass' ? 'green' : status === 'fail' ? 'red' : 'yellow';
  log(`  ${icon} ${name}${message ? ': ' + message : ''}`, color);
}

function logGroup(name) {
  log(`\nüîê ${name}`, 'cyan');
  testGroups.push({ name, tests: [] });
}

// HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies –∏ —Å–µ—Å—Å–∏–π
class AuthTestClient {
  constructor(baseUrl) {
    this.baseUrl = baseUrl;
    this.cookies = new Map();
    this.sessionToken = null;
    this.csrfToken = null;
  }

  async request(path, options = {}) {
    return new Promise((resolve, reject) => {
      const url = new URL(path, this.baseUrl);
      const client = url.protocol === 'https:' ? https : http;
      
      const headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'AuthTestClient/1.0',
        ...options.headers
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º cookies
      if (this.cookies.size > 0) {
        headers['Cookie'] = this.getCookieString();
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.csrfToken) {
        headers['X-CSRF-Token'] = this.csrfToken;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.sessionToken) {
        headers['Authorization'] = `Bearer ${this.sessionToken}`;
      }
      
      const reqOptions = {
        hostname: url.hostname,
        port: url.port,
        path: url.pathname + url.search,
        method: options.method || 'GET',
        headers,
        timeout: TIMEOUT
      };

      const req = client.request(reqOptions, (res) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if (res.headers['set-cookie']) {
          res.headers['set-cookie'].forEach(cookie => {
            const [nameValue, ...params] = cookie.split(';');
            const [name, value] = nameValue.split('=');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookie —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            this.cookies.set(name, {
              value,
              params: params.map(p => p.trim())
            });
            
            // –ò—â–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            if (name === 'admin_session' || name === 'session_token') {
              this.sessionToken = value;
            }
          });
        }
        
        // –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        if (res.headers['x-csrf-token']) {
          this.csrfToken = res.headers['x-csrf-token'];
        }

        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          try {
            const json = data ? JSON.parse(data) : {};
            
            // –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞
            if (json.token) {
              this.sessionToken = json.token;
            }
            if (json.csrfToken) {
              this.csrfToken = json.csrfToken;
            }
            
            resolve({
              status: res.statusCode,
              headers: res.headers,
              data: json,
              raw: data
            });
          } catch (e) {
            resolve({
              status: res.statusCode,
              headers: res.headers,
              data: data,
              raw: data
            });
          }
        });
      });

      req.on('error', reject);
      req.on('timeout', () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      if (options.body) {
        const bodyStr = typeof options.body === 'string' 
          ? options.body 
          : JSON.stringify(options.body);
        req.write(bodyStr);
      }
      
      req.end();
    });
  }

  getCookieString() {
    return Array.from(this.cookies.entries())
      .map(([name, data]) => `${name}=${data.value || data}`)
      .join('; ');
  }

  clearSession() {
    this.cookies.clear();
    this.sessionToken = null;
    this.csrfToken = null;
  }

  hasSession() {
    return this.sessionToken !== null || this.cookies.has('admin_session');
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function test(name, testFn) {
  totalTests++;
  const startTime = Date.now();
  
  try {
    await testFn();
    const duration = Date.now() - startTime;
    passedTests++;
    logTest(name, 'pass', `${duration}ms`);
    
    if (testGroups.length > 0) {
      testGroups[testGroups.length - 1].tests.push({
        name,
        status: 'pass',
        duration
      });
    }
    
    return true;
  } catch (error) {
    const duration = Date.now() - startTime;
    failedTests++;
    logTest(name, 'fail', error.message);
    
    if (testGroups.length > 0) {
      testGroups[testGroups.length - 1].tests.push({
        name,
        status: 'fail',
        error: error.message,
        duration
      });
    }
    
    return false;
  }
}

function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'Assertion failed');
  }
}

// –¢–ï–°–¢–´: –ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
async function testBasicAuthentication(client) {
  logGroup('–ë–ê–ó–û–í–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
    client.clearSession();
    const res = await client.request('/api/admin/auth/status');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.authenticated === false, 'Should not be authenticated');
  });
  
  // –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
  await test('–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
    client.clearSession();
    const res = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: TEST_CREDENTIALS.invalidUser
    });
    
    assert(
      res.status === 401 || res.status === 403,
      `Expected 401 or 403, got ${res.status}`
    );
    assert(res.data.success === false, 'Login should fail');
    assert(!client.hasSession(), 'Should not have session after failed login');
  });
  
  // –ü—É—Å—Ç—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  await test('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
    client.clearSession();
    const res = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: {}
    });
    
    assert(res.status === 400, `Expected 400, got ${res.status}`);
    assert(res.data.success === false, 'Login should fail');
  });
  
  // SQL –∏–Ω—ä–µ–∫—Ü–∏—è –≤ –ª–æ–≥–∏–Ω–µ
  await test('–ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ –ª–æ–≥–∏–Ω–µ', async () => {
    client.clearSession();
    const res = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: {
        username: "admin' OR '1'='1",
        password: "' OR '1'='1"
      }
    });
    
    assert(
      res.status === 401 || res.status === 403,
      'SQL injection attempt should fail'
    );
    assert(!client.hasSession(), 'Should not have session after SQL injection attempt');
  });
  
  // XSS –≤ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  await test('–ó–∞—â–∏—Ç–∞ –æ—Ç XSS –≤ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', async () => {
    client.clearSession();
    const res = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: {
        username: '<script>alert("XSS")</script>',
        password: '<img src=x onerror=alert("XSS")>'
      }
    });
    
    assert(
      res.status === 401 || res.status === 403,
      'XSS attempt should fail'
    );
    assert(!client.hasSession(), 'Should not have session after XSS attempt');
  });
}

// –¢–ï–°–¢–´: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
async function testSessionManagement(client) {
  logGroup('–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò');
  
  let sessionId;
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥)
  await test('–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ', async () => {
    client.clearSession();
    const res = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: TEST_CREDENTIALS.admin
    });
    
    // –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 200 –∏–ª–∏ 401 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (res.status === 200) {
      assert(res.data.success === true, 'Login should succeed');
      assert(client.hasSession(), 'Should have session after successful login');
      sessionId = client.sessionToken || client.cookies.get('admin_session')?.value;
    } else {
      // –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–π
      log('    ‚ö†Ô∏è  –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–π', 'yellow');
      return;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
  if (sessionId) {
    await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π', async () => {
      const res = await client.request('/api/admin/auth/status');
      assert(res.status === 200, `Expected 200, got ${res.status}`);
      assert(res.data.authenticated === true, 'Should be authenticated');
    });
    
    // –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º
    await test('–î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º —Å —Å–µ—Å—Å–∏–µ–π', async () => {
      const res = await client.request('/api/admin/products', {
        method: 'GET'
      });
      
      // –î–æ–ª–∂–µ–Ω –ª–∏–±–æ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ 404 –µ—Å–ª–∏ endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      assert(
        res.status === 200 || res.status === 404,
        `Expected 200 or 404, got ${res.status}`
      );
    });
    
    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    await test('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', async () => {
      const res = await client.request('/api/admin/auth/logout', {
        method: 'POST'
      });
      
      assert(
        res.status === 200 || res.status === 204,
        `Expected 200 or 204, got ${res.status}`
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞
      const statusRes = await client.request('/api/admin/auth/status');
      assert(statusRes.data.authenticated === false, 'Should not be authenticated after logout');
    });
  }
  
  // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏
  await test('–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
    client.clearSession();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–µ–π–∫–æ–≤—É—é —Å–µ—Å—Å–∏—é
    client.cookies.set('admin_session', { value: 'invalid_session_id_12345' });
    
    const res = await client.request('/api/admin/auth/status');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.authenticated === false, 'Should not be authenticated with invalid session');
  });
}

// –¢–ï–°–¢–´: Rate Limiting
async function testRateLimiting(client) {
  logGroup('RATE LIMITING');
  
  // Rate limiting –¥–ª—è –ª–æ–≥–∏–Ω–∞
  await test('Rate limiting –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞', async () => {
    client.clearSession();
    const attempts = [];
    
    // –î–µ–ª–∞–µ–º 10 –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    for (let i = 0; i < 10; i++) {
      attempts.push(
        client.request('/api/admin/auth/login', {
          method: 'POST',
          body: {
            username: `test_user_${i}`,
            password: 'wrong_password'
          }
        }).catch(e => ({ status: 429, error: e.message }))
      );
    }
    
    const results = await Promise.all(attempts);
    const rateLimited = results.some(r => r.status === 429);
    
    assert(rateLimited, 'Rate limiting should trigger after multiple attempts');
  });
  
  // Rate limiting –¥–ª—è API
  await test('Rate limiting –¥–ª—è –æ–±—â–∏—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    const attempts = [];
    
    // –î–µ–ª–∞–µ–º 150 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ª–∏–º–∏—Ç –æ–±—ã—á–Ω–æ 100/–º–∏–Ω)
    for (let i = 0; i < 150; i++) {
      attempts.push(
        client.request('/api/products?limit=1')
          .catch(e => ({ status: 429, error: e.message }))
      );
    }
    
    const results = await Promise.all(attempts);
    const rateLimited = results.some(r => r.status === 429);
    
    // Rate limiting –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
    assert(rateLimited, 'API rate limiting should trigger after many requests');
  });
}

// –¢–ï–°–¢–´: –¢–æ–∫–µ–Ω—ã –∏ CSRF –∑–∞—â–∏—Ç–∞
async function testTokenSecurity(client) {
  logGroup('–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –¢–û–ö–ï–ù–û–í');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ—Å—Å–∏–π', async () => {
    const sessions = new Set();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π
    for (let i = 0; i < 3; i++) {
      client.clearSession();
      const res = await client.request('/api/admin/auth/login', {
        method: 'POST',
        body: TEST_CREDENTIALS.admin
      });
      
      if (res.status === 200 && client.hasSession()) {
        const sessionId = client.sessionToken || client.cookies.get('admin_session')?.value;
        assert(!sessions.has(sessionId), 'Session tokens should be unique');
        sessions.add(sessionId);
      }
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–æ–∫–µ–Ω–∞
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–æ–∫–µ–Ω–∞', async () => {
    client.clearSession();
    const res = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: TEST_CREDENTIALS.admin
    });
    
    if (res.status === 200 && client.hasSession()) {
      const token = client.sessionToken || client.cookies.get('admin_session')?.value;
      assert(token.length >= 32, `Token too short: ${token.length} chars`);
    }
  });
  
  // CSRF –∑–∞—â–∏—Ç–∞
  await test('CSRF –∑–∞—â–∏—Ç–∞ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    // –ü–æ–ø—ã—Ç–∫–∞ POST –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞
    const res = await client.request('/api/admin/products', {
      method: 'POST',
      body: { name: 'Test Product' },
      headers: {
        'Origin': 'http://evil-site.com'
      }
    });
    
    // –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    assert(
      res.status === 403 || res.status === 401 || res.status === 404,
      'Should reject cross-origin POST'
    );
  });
}

// –¢–ï–°–¢–´: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
async function testAccessControl(client) {
  logGroup('–ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê');
  
  // –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  await test('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ä–µ—Å—É—Ä—Å–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
    client.clearSession();
    
    const adminEndpoints = [
      '/api/admin/users',
      '/api/admin/settings',
      '/api/admin/products/create',
      '/api/admin/categories/create'
    ];
    
    for (const endpoint of adminEndpoints) {
      const res = await client.request(endpoint);
      assert(
        res.status === 401 || res.status === 403 || res.status === 404,
        `${endpoint} should require auth, got ${res.status}`
      );
    }
  });
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  await test('–ü—É–±–ª–∏—á–Ω—ã–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
    client.clearSession();
    
    const publicEndpoints = [
      '/api/products',
      '/api/categories',
      '/api/manufacturers',
      '/api/health'
    ];
    
    for (const endpoint of publicEndpoints) {
      const res = await client.request(endpoint);
      assert(
        res.status === 200,
        `${endpoint} should be public, got ${res.status}`
      );
    }
  });
}

// –¢–ï–°–¢–´: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª–µ–π
async function testPasswordSecurity(client) {
  logGroup('–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ü–ê–†–û–õ–ï–ô');
  
  // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
  await test('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è', async () => {
    const res = await client.request('/api/admin/auth/change-password', {
      method: 'POST',
      body: {
        currentPassword: 'old_pass',
        newPassword: '123'
      }
    });
    
    // –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    assert(
      res.status === 400 || res.status === 401 || res.status === 404,
      'Should reject short password'
    );
  });
  
  // –ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö
  await test('–ü–∞—Ä–æ–ª–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ API –æ—Ç–≤–µ—Ç–∞—Ö', async () => {
    const res = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: TEST_CREDENTIALS.admin
    });
    
    const responseStr = JSON.stringify(res.data);
    assert(
      !responseStr.includes(TEST_CREDENTIALS.admin.password),
      'Password should not be in response'
    );
  });
}

// –¢–ï–°–¢–´: –¢–∞–π–º-–∞—É—Ç—ã —Å–µ—Å—Å–∏–π
async function testSessionTimeouts(client) {
  logGroup('–¢–ê–ô–ú-–ê–£–¢–´ –°–ï–°–°–ò–ô');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏', async () => {
    client.clearSession();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
    client.cookies.set('admin_session', {
      value: 'expired_session_' + Date.now(),
      params: ['Expires=' + new Date(Date.now() - 1000).toUTCString()]
    });
    
    const res = await client.request('/api/admin/auth/status');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.authenticated === false, 'Expired session should not be valid');
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  await test('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', async () => {
    client.clearSession();
    const loginRes = await client.request('/api/admin/auth/login', {
      method: 'POST',
      body: TEST_CREDENTIALS.admin
    });
    
    if (loginRes.status === 200) {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const res = await client.request('/api/admin/auth/status');
      assert(res.status === 200, 'Session should still be valid');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cookie –æ–±–Ω–æ–≤–∏–ª—Å—è
      const sessionCookie = client.cookies.get('admin_session');
      if (sessionCookie && sessionCookie.params) {
        const hasExpires = sessionCookie.params.some(p => p.startsWith('Expires='));
        assert(hasExpires, 'Session cookie should have expiration');
      }
    }
  });
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
async function runAuthTests() {
  log('\n' + '='.repeat(60), 'bold');
  log('üîê –¢–ï–°–¢–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ò –°–ï–°–°–ò–ô MEDSIP.PROTEZ', 'bold');
  log('='.repeat(60), 'bold');
  log(`üìç URL: ${BASE_URL}`, 'blue');
  log(`‚è±Ô∏è  Timeout: ${TIMEOUT}ms`, 'blue');
  
  const startTime = Date.now();
  const client = new AuthTestClient(BASE_URL);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    await client.request('/api/health');
  } catch (error) {
    log('\n‚ùå –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!', 'red');
    log(`–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${BASE_URL}`, 'yellow');
    log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev', 'yellow');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  await testBasicAuthentication(client);
  await testSessionManagement(client);
  await testRateLimiting(client);
  await testTokenSecurity(client);
  await testAccessControl(client);
  await testPasswordSecurity(client);
  await testSessionTimeouts(client);
  
  // –ò—Ç–æ–≥–∏
  const duration = Date.now() - startTime;
  
  log('\n' + '='.repeat(60), 'bold');
  log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò', 'bold');
  log('='.repeat(60), 'bold');
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
  log('\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ì–†–£–ü–ü–ê–ú:', 'cyan');
  testGroups.forEach(group => {
    const passed = group.tests.filter(t => t.status === 'pass').length;
    const failed = group.tests.filter(t => t.status === 'fail').length;
    const rate = group.tests.length > 0 ? Math.round((passed / group.tests.length) * 100) : 0;
    const color = rate === 100 ? 'green' : rate >= 80 ? 'yellow' : 'red';
    
    log(`  ${group.name}: ${passed}/${group.tests.length} (${rate}%)`, color);
    
    if (failed > 0) {
      group.tests.filter(t => t.status === 'fail').forEach(test => {
        log(`    ‚ùå ${test.name}: ${test.error}`, 'dim');
      });
    }
  });
  
  log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`, 'blue');
  log(`üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`, failedTests > 0 ? 'red' : 'green');
  
  const successRate = totalTests > 0 ? Math.round((passedTests / totalTests) * 100) : 0;
  const rateColor = successRate === 100 ? 'green' : successRate >= 80 ? 'yellow' : 'red';
  
  log(`\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, rateColor);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  log('\nüîí –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:', 'magenta');
  log('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ', 'dim');
  log('  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ CORS –ø–æ–ª–∏—Ç–∏–∫–∏', 'dim');
  log('  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ—Ç–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏', 'dim');
  log('  ‚Ä¢ –õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞', 'dim');
  log('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 2FA –¥–ª—è –∞–¥–º–∏–Ω–æ–≤', 'dim');
  
  if (failedTests === 0) {
    log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!', 'green');
  } else {
    log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.', 'red');
  }
  
  // Exit –∫–æ–¥ –¥–ª—è CI/CD
  process.exit(failedTests > 0 ? 1 : 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  console.error(error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAuthTests().catch(error => {
  log('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', 'red');
  console.error(error);
  process.exit(1);
});