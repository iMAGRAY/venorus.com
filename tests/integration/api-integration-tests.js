#!/usr/bin/env node

/**
 * –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ API –î–õ–Ø MEDSIP.PROTEZ
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
 * 
 * –ó–∞–ø—É—Å–∫: node tests/integration/api-integration-tests.js
 */

const http = require('http');
const https = require('https');
const { URL } = require('url');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.TEST_URL || 'http://localhost:3010';
const TIMEOUT = 10000; // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
  dim: '\x1b[2m'
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
let testGroups = [];

// –£—Ç–∏–ª–∏—Ç—ã
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(name, status, message = '') {
  const icon = status === 'pass' ? '‚úÖ' : status === 'fail' ? '‚ùå' : '‚è≠Ô∏è';
  const color = status === 'pass' ? 'green' : status === 'fail' ? 'red' : 'yellow';
  log(`  ${icon} ${name}${message ? ': ' + message : ''}`, color);
}

function logGroup(name) {
  log(`\nüì¶ ${name}`, 'cyan');
  testGroups.push({ name, tests: [] });
}

// HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies
class TestClient {
  constructor(baseUrl) {
    this.baseUrl = baseUrl;
    this.cookies = new Map();
  }

  async request(path, options = {}) {
    return new Promise((resolve, reject) => {
      const url = new URL(path, this.baseUrl);
      const client = url.protocol === 'https:' ? https : http;
      
      const reqOptions = {
        hostname: url.hostname,
        port: url.port,
        path: url.pathname + url.search,
        method: options.method || 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': this.getCookieString(),
          ...options.headers
        },
        timeout: TIMEOUT
      };

      const req = client.request(reqOptions, (res) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
        if (res.headers['set-cookie']) {
          res.headers['set-cookie'].forEach(cookie => {
            const [nameValue] = cookie.split(';');
            const [name, value] = nameValue.split('=');
            this.cookies.set(name, value);
          });
        }

        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          try {
            const json = data ? JSON.parse(data) : {};
            resolve({
              status: res.statusCode,
              headers: res.headers,
              data: json,
              raw: data
            });
          } catch (e) {
            resolve({
              status: res.statusCode,
              headers: res.headers,
              data: data,
              raw: data
            });
          }
        });
      });

      req.on('error', reject);
      req.on('timeout', () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      if (options.body) {
        const bodyStr = typeof options.body === 'string' 
          ? options.body 
          : JSON.stringify(options.body);
        req.write(bodyStr);
      }
      
      req.end();
    });
  }

  getCookieString() {
    return Array.from(this.cookies.entries())
      .map(([name, value]) => `${name}=${value}`)
      .join('; ');
  }

  clearCookies() {
    this.cookies.clear();
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function test(name, testFn) {
  totalTests++;
  const startTime = Date.now();
  
  try {
    await testFn();
    const duration = Date.now() - startTime;
    passedTests++;
    logTest(name, 'pass', `${duration}ms`);
    
    if (testGroups.length > 0) {
      testGroups[testGroups.length - 1].tests.push({
        name,
        status: 'pass',
        duration
      });
    }
    
    return true;
  } catch (error) {
    const duration = Date.now() - startTime;
    failedTests++;
    logTest(name, 'fail', error.message);
    
    if (testGroups.length > 0) {
      testGroups[testGroups.length - 1].tests.push({
        name,
        status: 'fail',
        error: error.message,
        duration
      });
    }
    
    return false;
  }
}

function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'Assertion failed');
  }
}

function assertEqual(actual, expected, message) {
  if (actual !== expected) {
    throw new Error(message || `Expected ${expected}, got ${actual}`);
  }
}

function assertIncludes(array, item, message) {
  if (!array.includes(item)) {
    throw new Error(message || `Array does not include ${item}`);
  }
}

function assertGreaterThan(value, threshold, message) {
  if (!(value > threshold)) {
    throw new Error(message || `${value} is not greater than ${threshold}`);
  }
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
async function testProductLifecycle(client) {
  logGroup('–ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ –ü–†–û–î–£–ö–¢–ê');
  
  let productId;
  let categoryId;
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
    const res = await client.request('/api/categories');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'Categories fetch failed');
    assert(Array.isArray(res.data.data), 'Categories data is not array');
    
    if (res.data.data.length > 0) {
      categoryId = res.data.data[0].id;
    }
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', async () => {
    const res = await client.request('/api/products?limit=1');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.data.length > 0, 'No products found');
    productId = res.data.data[0].id;
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ', async () => {
    const res = await client.request(`/api/products/${productId}`);
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'Product fetch failed');
    assert(res.data.data.id === productId, 'Product ID mismatch');
  });
  
  // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
    const res = await client.request(`/api/products/${productId}/characteristics-simple`);
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'Characteristics fetch failed');
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
    const res = await client.request(`/api/products/${productId}/variants`);
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'Variants fetch failed');
    assert(Array.isArray(res.data.data), 'Variants data is not array');
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', async () => {
    const res = await client.request(`/api/products/${productId}/similar`);
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'Similar products fetch failed');
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
    const res = await client.request(`/api/products/${productId}/images`);
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'Images fetch failed');
  });
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
async function testSearchAndFiltering(client) {
  logGroup('–ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø');
  
  let categoryId;
  let manufacturerId;
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏', async () => {
    const res = await client.request('/api/categories');
    assert(res.status === 200, 'Categories fetch failed');
    if (res.data.data && res.data.data.length > 0) {
      categoryId = res.data.data[0].id;
    }
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏', async () => {
    const res = await client.request('/api/manufacturers');
    assert(res.status === 200, 'Manufacturers fetch failed');
    if (res.data.data && res.data.data.length > 0) {
      manufacturerId = res.data.data[0].id;
    }
  });
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
  await test('–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É', async () => {
    const res = await client.request('/api/products/search?q=–ø—Ä–æ—Ç–µ–∑');
    assert(res.status === 200, 'Search failed');
    assert(res.data.success === true, 'Search returned error');
    assert(Array.isArray(res.data.data), 'Search data is not array');
  });
  
  // –ü–æ–∏—Å–∫ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  await test('–ü–æ–∏—Å–∫ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', async () => {
    const res = await client.request('/api/products/search?q=–º–æ–¥—É–ª—å&includeVariants=true');
    assert(res.status === 200, 'Search with variants failed');
    assert(res.data.success === true, 'Search returned error');
  });
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (categoryId) {
    await test('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
      const res = await client.request(`/api/products?category_id=${categoryId}`);
      assert(res.status === 200, 'Category filter failed');
      assert(res.data.success === true, 'Filter returned error');
    });
  }
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é
  if (manufacturerId) {
    await test('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é', async () => {
      const res = await client.request(`/api/products?manufacturer_id=${manufacturerId}`);
      assert(res.status === 200, 'Manufacturer filter failed');
      assert(res.data.success === true, 'Filter returned error');
    });
  }
  
  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  await test('–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è', async () => {
    const res = await client.request('/api/products?limit=5&page=1&sort=price_asc');
    assert(res.status === 200, 'Combined filter failed');
    assert(res.data.success === true, 'Filter returned error');
    assert(res.data.data.length <= 5, 'Limit not working');
  });
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏', async () => {
    const page1 = await client.request('/api/products?limit=5&page=1');
    const page2 = await client.request('/api/products?limit=5&page=2');
    
    assert(page1.status === 200, 'Page 1 failed');
    assert(page2.status === 200, 'Page 2 failed');
    
    if (page1.data.data.length > 0 && page2.data.data.length > 0) {
      assert(
        page1.data.data[0].id !== page2.data.data[0].id,
        'Pagination not working - same products on different pages'
      );
    }
  });
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
async function testCategoryHierarchy(client) {
  logGroup('–ò–ï–†–ê–†–•–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô');
  
  let rootCategoryId;
  let childCategoryId;
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', async () => {
    const res = await client.request('/api/categories');
    assert(res.status === 200, 'Categories fetch failed');
    assert(Array.isArray(res.data.data), 'Categories is not array');
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –¥–µ—Ç—å–º–∏
    const categoryWithChildren = res.data.data.find(cat => 
      cat.children && cat.children.length > 0
    );
    
    if (categoryWithChildren) {
      rootCategoryId = categoryWithChildren.id;
      childCategoryId = categoryWithChildren.children[0].id;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  if (rootCategoryId) {
    await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
      const res = await client.request(`/api/products?category_id=${rootCategoryId}`);
      assert(res.status === 200, 'Parent category products failed');
      assert(res.data.success === true, 'Failed to get parent category products');
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  if (childCategoryId) {
    await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ—á–µ—Ä–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
      const res = await client.request(`/api/products?category_id=${childCategoryId}`);
      assert(res.status === 200, 'Child category products failed');
      assert(res.data.success === true, 'Failed to get child category products');
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  if (childCategoryId) {
    await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
      const res = await client.request(`/api/categories/${childCategoryId}/breadcrumbs`);
      assert(res.status === 200, 'Breadcrumbs fetch failed');
      assert(res.data.success === true, 'Failed to get breadcrumbs');
      assert(Array.isArray(res.data.data), 'Breadcrumbs is not array');
    });
  }
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –†–∞–±–æ—Ç–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
async function testProductVariants(client) {
  logGroup('–í–ê–†–ò–ê–ù–¢–´ –ü–†–û–î–£–ö–¢–û–í');
  
  let productWithVariants;
  let variantId;
  
  // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
  await test('–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏', async () => {
    const res = await client.request('/api/products?limit=50');
    assert(res.status === 200, 'Products fetch failed');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    for (const product of res.data.data) {
      const varRes = await client.request(`/api/products/${product.id}/variants`);
      if (varRes.data.data && varRes.data.data.length > 0) {
        productWithVariants = product;
        variantId = varRes.data.data[0].id;
        break;
      }
    }
    
    assert(productWithVariants, 'No products with variants found');
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  if (productWithVariants && variantId) {
    await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∞—Ä–∏–∞–Ω—Ç–∞', async () => {
      const res = await client.request(`/api/variants/${variantId}`);
      assert(res.status === 200, 'Variant details fetch failed');
      assert(res.data.success === true, 'Failed to get variant details');
      assert(res.data.data.id === variantId, 'Variant ID mismatch');
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ–¥—É–∫—Ç–æ–º
    await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ–¥—É–∫—Ç–æ–º', async () => {
      const res = await client.request(`/api/variants/${variantId}`);
      assert(res.status === 200, 'Variant fetch failed');
      assert(
        res.data.data.master_id === productWithVariants.id,
        'Variant not linked to correct master product'
      );
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
  await test('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º', async () => {
    if (productWithVariants) {
      const res = await client.request(`/api/products/${productWithVariants.id}/variants?size=M`);
      assert(res.status === 200, 'Size filter failed');
      assert(res.data.success === true, 'Failed to filter by size');
    }
  });
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async function testProductCharacteristics(client) {
  logGroup('–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ü–†–û–î–£–ö–¢–û–í');
  
  let productId;
  let characteristicId;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫', async () => {
    const res = await client.request('/api/products?limit=1');
    assert(res.status === 200, 'Products fetch failed');
    assert(res.data.data.length > 0, 'No products found');
    productId = res.data.data[0].id;
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫', async () => {
    const res = await client.request('/api/characteristics');
    assert(res.status === 200, 'Characteristics fetch failed');
    assert(res.data.success === true, 'Failed to get characteristics');
    
    if (res.data.data && res.data.data.length > 0) {
      characteristicId = res.data.data[0].id;
    }
  });
  
  // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
  await test('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
    const res = await client.request(`/api/products/${productId}/characteristics-simple`);
    assert(res.status === 200, 'Product characteristics fetch failed');
    assert(res.data.success === true, 'Failed to get product characteristics');
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫', async () => {
    const res = await client.request(`/api/products/${productId}/characteristics-grouped`);
    assert(res.status === 200, 'Grouped characteristics fetch failed');
    assert(res.data.success === true, 'Failed to get grouped characteristics');
    
    if (res.data.data) {
      assert(typeof res.data.data === 'object', 'Grouped data is not object');
    }
  });
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
async function testPerformanceIntegration(client) {
  logGroup('–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  
  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  await test('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö', async () => {
    const startTime = Date.now();
    
    const promises = [
      client.request('/api/products?limit=10'),
      client.request('/api/categories'),
      client.request('/api/manufacturers'),
      client.request('/api/characteristics')
    ];
    
    const results = await Promise.all(promises);
    const duration = Date.now() - startTime;
    
    results.forEach(res => {
      assert(res.status === 200, 'One of parallel requests failed');
    });
    
    assert(duration < 3000, `Parallel requests took ${duration}ms (>3000ms)`);
  });
  
  // –ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö
  await test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö', async () => {
    const startTime = Date.now();
    const res = await client.request('/api/products?limit=100');
    const duration = Date.now() - startTime;
    
    assert(res.status === 200, 'Large data fetch failed');
    assert(duration < 5000, `Large data fetch took ${duration}ms (>5000ms)`);
  });
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è', async () => {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const start1 = Date.now();
    const res1 = await client.request('/api/categories');
    const duration1 = Date.now() - start1;
    
    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –∏–∑-–∑–∞ –∫—ç—à–∞)
    const start2 = Date.now();
    const res2 = await client.request('/api/categories');
    const duration2 = Date.now() - start2;
    
    assert(res1.status === 200, 'First request failed');
    assert(res2.status === 200, 'Second request failed');
    
    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –ø–µ—Ä–≤–æ–≥–æ
    assert(
      duration2 <= duration1 * 1.5,
      `Cache not working: first ${duration1}ms, second ${duration2}ms`
    );
  });
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async function testErrorHandlingIntegration(client) {
  logGroup('–û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  
  // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
  await test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
    const res = await client.request('/api/products/999999999');
    assert(
      res.status === 404 || res.status === 400,
      `Expected 404 or 400, got ${res.status}`
    );
  });
  
  // –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  await test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏', async () => {
    const res = await client.request('/api/products?page=-1&limit=abc');
    assert(
      res.status === 400 || res.status === 200,
      `Expected 400 or 200 with defaults, got ${res.status}`
    );
  });
  
  // SQL –∏–Ω—ä–µ–∫—Ü–∏—è –∑–∞—â–∏—Ç–∞
  await test('–ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π', async () => {
    const res = await client.request('/api/products/search?q=\'; DROP TABLE products; --');
    assert(
      res.status === 200 || res.status === 400,
      'SQL injection protection failed'
    );
    
    if (res.status === 200) {
      assert(res.data.success === true, 'Search failed on SQL injection attempt');
    }
  });
  
  // XSS –∑–∞—â–∏—Ç–∞ - middleware –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å XSS –∑–∞–ø—Ä–æ—Å—ã
  await test('–ó–∞—â–∏—Ç–∞ –æ—Ç XSS', async () => {
    const res = await client.request('/api/products/search?q=<script>alert("XSS")</script>');
    
    // Middleware –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å XSS —Å 400 —Å—Ç–∞—Ç—É—Å–æ–º
    assert(res.status === 400, 'XSS protection should block request with 400 status');
    
    // –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    if (res.data) {
      const responseData = typeof res.data === 'string' ? JSON.parse(res.data) : res.data;
      assert(
        responseData.success === false && 
        (responseData.error.includes('Malicious request') || responseData.code === 'XSS_ATTEMPT'),
        'XSS protection should return error message'
      );
    }
  });
  
  // –ë–æ–ª—å—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
  await test('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    const largeString = 'a'.repeat(10000);
    const res = await client.request(`/api/products/search?q=${largeString}`);
    assert(
      res.status === 200 || res.status === 400 || res.status === 414,
      'Large request not handled properly'
    );
  });
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
async function runIntegrationTests() {
  log('\n' + '='.repeat(60), 'bold');
  log('üî¨ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ MEDSIP.PROTEZ', 'bold');
  log('='.repeat(60), 'bold');
  log(`üìç URL: ${BASE_URL}`, 'blue');
  log(`‚è±Ô∏è  Timeout: ${TIMEOUT}ms`, 'blue');
  
  const startTime = Date.now();
  const client = new TestClient(BASE_URL);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    await client.request('/api/health');
  } catch (error) {
    log('\n‚ùå –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!', 'red');
    log(`–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${BASE_URL}`, 'yellow');
    log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev', 'yellow');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  await testProductLifecycle(client);
  await testSearchAndFiltering(client);
  await testCategoryHierarchy(client);
  await testProductVariants(client);
  await testProductCharacteristics(client);
  await testPerformanceIntegration(client);
  await testErrorHandlingIntegration(client);
  
  // –ò—Ç–æ–≥–∏
  const duration = Date.now() - startTime;
  
  log('\n' + '='.repeat(60), 'bold');
  log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bold');
  log('='.repeat(60), 'bold');
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
  log('\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ì–†–£–ü–ü–ê–ú:', 'cyan');
  testGroups.forEach(group => {
    const passed = group.tests.filter(t => t.status === 'pass').length;
    const failed = group.tests.filter(t => t.status === 'fail').length;
    const rate = Math.round((passed / group.tests.length) * 100);
    const color = rate === 100 ? 'green' : rate >= 80 ? 'yellow' : 'red';
    
    log(`  ${group.name}: ${passed}/${group.tests.length} (${rate}%)`, color);
    
    if (failed > 0) {
      group.tests.filter(t => t.status === 'fail').forEach(test => {
        log(`    ‚ùå ${test.name}: ${test.error}`, 'dim');
      });
    }
  });
  
  log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`, 'blue');
  log(`üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`, failedTests > 0 ? 'red' : 'green');
  
  const successRate = Math.round((passedTests / totalTests) * 100);
  const rateColor = successRate === 100 ? 'green' : successRate >= 80 ? 'yellow' : 'red';
  
  log(`\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, rateColor);
  
  if (failedTests === 0) {
    log('\nüéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!', 'green');
  } else {
    log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.', 'red');
  }
  
  // Exit –∫–æ–¥ –¥–ª—è CI/CD
  process.exit(failedTests > 0 ? 1 : 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  console.error(error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runIntegrationTests().catch(error => {
  log('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', 'red');
  console.error(error);
  process.exit(1);
});