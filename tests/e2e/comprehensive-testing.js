/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï E2E –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–ù–ï–¢-–ú–ê–ì–ê–ó–ò–ù–ê –ú–ï–î–ò–¶–ò–ù–°–ö–ò–• –¢–û–í–ê–†–û–í
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
 * - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
 * - API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * - –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 
 * @author QA Automation Specialist
 * @created 2025-08-16
 */

const fetch = require('node-fetch');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  BASE_URL: 'http://localhost:3009',
  TIMEOUT: 10000,
  MAX_RETRIES: 3,
  PERFORMANCE_THRESHOLDS: {
    PAGE_LOAD: 3000,    // 3 —Å–µ–∫—É–Ω–¥—ã
    API_RESPONSE: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    SEARCH: 1500        // 1.5 —Å–µ–∫—É–Ω–¥—ã
  }
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testResults = {
  startTime: new Date(),
  endTime: null,
  totalTests: 0,
  passedTests: 0,
  failedTests: 0,
  skippedTests: 0,
  results: [],
  performance: [],
  issues: [],
  regression: []
};

/**
 * –£—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
function measureTime(startTime) {
  return Date.now() - startTime;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
 */
async function fetchWithTiming(url, options = {}) {
  const startTime = Date.now();
  try {
    const response = await fetch(url, {
      timeout: CONFIG.TIMEOUT,
      ...options
    });
    const endTime = Date.now();
    const timing = endTime - startTime;
    
    return {
      response,
      timing,
      success: true
    };
  } catch (error) {
    const endTime = Date.now();
    const timing = endTime - startTime;
    
    return {
      response: null,
      timing,
      success: false,
      error: error.message
    };
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
function logTestResult(testName, status, details = {}) {
  testResults.totalTests++;
  
  const result = {
    test: testName,
    status,
    timestamp: new Date(),
    ...details
  };
  
  testResults.results.push(result);
  
  if (status === 'PASS') {
    testResults.passedTests++;
    console.log(`‚úÖ ${testName} - PASS`);
  } else if (status === 'FAIL') {
    testResults.failedTests++;
    console.log(`‚ùå ${testName} - FAIL: ${details.error || 'Unknown error'}`);
    if (details.error) {
      testResults.issues.push({
        test: testName,
        error: details.error,
        priority: details.priority || 'MEDIUM'
      });
    }
  } else if (status === 'SKIP') {
    testResults.skippedTests++;
    console.log(`‚è≠Ô∏è ${testName} - SKIP: ${details.reason || 'Skipped'}`);
  }
  
  if (details.timing) {
    testResults.performance.push({
      test: testName,
      timing: details.timing,
      threshold: details.threshold
    });
  }
}

/**
 * –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
 */
async function testMainPages() {
  console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –°–¢–†–ê–ù–ò–¶');
  
  const pages = [
    { path: '/', name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
    { path: '/about', name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"' },
    { path: '/contacts', name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤' },
    { path: '/manufacturers', name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π' },
    { path: '/products', name: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤' }
  ];
  
  for (const page of pages) {
    const url = `${CONFIG.BASE_URL}${page.path}`;
    const result = await fetchWithTiming(url);
    
    if (result.success && result.response.ok) {
      const isPerformant = result.timing <= CONFIG.PERFORMANCE_THRESHOLDS.PAGE_LOAD;
      logTestResult(
        `–ó–∞–≥—Ä—É–∑–∫–∞: ${page.name}`,
        'PASS',
        {
          timing: result.timing,
          threshold: CONFIG.PERFORMANCE_THRESHOLDS.PAGE_LOAD,
          performant: isPerformant,
          url: url,
          status: result.response.status
        }
      );
      
      if (!isPerformant) {
        testResults.issues.push({
          test: `–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${page.name}`,
          error: `–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ ${result.timing}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${CONFIG.PERFORMANCE_THRESHOLDS.PAGE_LOAD}ms`,
          priority: 'LOW'
        });
      }
    } else {
      logTestResult(
        `–ó–∞–≥—Ä—É–∑–∫–∞: ${page.name}`,
        'FAIL',
        {
          error: result.error || `HTTP ${result.response?.status}`,
          priority: 'HIGH',
          url: url
        }
      );
    }
  }
}

/**
 * –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
 */
async function testAPIEndpoints() {
  console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS');
  
  const endpoints = [
    { path: '/api/health', name: 'Health Check' },
    { path: '/api/db-status', name: 'Database Status' },
    { path: '/api/cache-status', name: 'Cache Status' },
    { path: '/api/categories', name: 'Categories API' },
    { path: '/api/products', name: 'Products API' },
    { path: '/api/manufacturers', name: 'Manufacturers API' },
    { path: '/api/home', name: 'Home Data API' },
    { path: '/api/site-settings', name: 'Site Settings API' }
  ];
  
  for (const endpoint of endpoints) {
    const url = `${CONFIG.BASE_URL}${endpoint.path}`;
    const result = await fetchWithTiming(url);
    
    if (result.success && result.response.ok) {
      try {
        const data = await result.response.json();
        const isPerformant = result.timing <= CONFIG.PERFORMANCE_THRESHOLDS.API_RESPONSE;
        
        logTestResult(
          `API: ${endpoint.name}`,
          'PASS',
          {
            timing: result.timing,
            threshold: CONFIG.PERFORMANCE_THRESHOLDS.API_RESPONSE,
            performant: isPerformant,
            url: url,
            status: result.response.status,
            hasData: !!data
          }
        );
        
        if (!isPerformant) {
          testResults.issues.push({
            test: `API –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${endpoint.name}`,
            error: `–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ ${result.timing}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${CONFIG.PERFORMANCE_THRESHOLDS.API_RESPONSE}ms`,
            priority: 'MEDIUM'
          });
        }
      } catch (jsonError) {
        logTestResult(
          `API: ${endpoint.name}`,
          'FAIL',
          {
            error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: ${jsonError.message}`,
            priority: 'HIGH'
          }
        );
      }
    } else {
      // –î–ª—è Redis API –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ Redis –æ—Ç–∫–ª—é—á–µ–Ω
      if (endpoint.path === '/api/redis-status') {
        logTestResult(
          `API: ${endpoint.name}`,
          'PASS',
          {
            note: '–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - Redis –æ—Ç–∫–ª—é—á–µ–Ω',
            error: result.error || `HTTP ${result.response?.status}`
          }
        );
      } else {
        logTestResult(
          `API: ${endpoint.name}`,
          'FAIL',
          {
            error: result.error || `HTTP ${result.response?.status}`,
            priority: 'HIGH',
            url: url
          }
        );
      }
    }
  }
}

/**
 * –¢–ï–°–¢ 3: –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ ID 371
 */
async function testRegressionProductID371() {
  console.log('\nüîç –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –¢–û–í–ê–† ID 371');
  
  // –¢–µ—Å—Ç 1: API –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞
  const apiUrl = `${CONFIG.BASE_URL}/api/products/371`;
  const apiResult = await fetchWithTiming(apiUrl);
  
  if (apiResult.success && apiResult.response.ok) {
    try {
      const productData = await apiResult.response.json();
      logTestResult(
        '–†–µ–≥—Ä–µ—Å—Å–∏—è: API —Ç–æ–≤–∞—Ä–∞ ID 371',
        'PASS',
        {
          timing: apiResult.timing,
          hasData: !!productData,
          productName: productData.name || 'Unknown'
        }
      );
      
      testResults.regression.push({
        test: 'Product ID 371 API',
        status: 'FIXED',
        data: productData
      });
    } catch (error) {
      logTestResult(
        '–†–µ–≥—Ä–µ—Å—Å–∏—è: API —Ç–æ–≤–∞—Ä–∞ ID 371',
        'FAIL',
        {
          error: `JSON Parse Error: ${error.message}`,
          priority: 'HIGH'
        }
      );
    }
  } else {
    logTestResult(
      '–†–µ–≥—Ä–µ—Å—Å–∏—è: API —Ç–æ–≤–∞—Ä–∞ ID 371',
      'FAIL',
      {
        error: apiResult.error || `HTTP ${apiResult.response?.status}`,
        priority: 'HIGH'
      }
    );
  }
  
  // –¢–µ—Å—Ç 2: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞
  const pageUrl = `${CONFIG.BASE_URL}/products/371`;
  const pageResult = await fetchWithTiming(pageUrl);
  
  if (pageResult.success && pageResult.response.ok) {
    logTestResult(
      '–†–µ–≥—Ä–µ—Å—Å–∏—è: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ ID 371',
      'PASS',
      {
        timing: pageResult.timing,
        url: pageUrl
      }
    );
    
    testResults.regression.push({
      test: 'Product ID 371 Page',
      status: 'FIXED'
    });
  } else {
    logTestResult(
      '–†–µ–≥—Ä–µ—Å—Å–∏—è: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ ID 371',
      'FAIL',
      {
        error: pageResult.error || `HTTP ${pageResult.response?.status}`,
        priority: 'HIGH'
      }
    );
  }
}

/**
 * –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π (8 –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
 */
async function testCategoriesStructure() {
  console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ö–ê–¢–ï–ì–û–†–ò–ô');
  
  const url = `${CONFIG.BASE_URL}/api/categories`;
  const result = await fetchWithTiming(url);
  
  if (result.success && result.response.ok) {
    try {
      const categories = await result.response.json();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const rootCategories = categories.filter(cat => !cat.parent_id || cat.parent_id === null);
      const expectedRootCount = 8;
      
      if (rootCategories.length === expectedRootCount) {
        logTestResult(
          '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: 8 –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
          'PASS',
          {
            rootCategoriesCount: rootCategories.length,
            totalCategories: categories.length
          }
        );
        
        testResults.regression.push({
          test: 'Categories Structure',
          status: 'FIXED',
          rootCategories: rootCategories.length,
          totalCategories: categories.length
        });
      } else {
        logTestResult(
          '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: 8 –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
          'FAIL',
          {
            error: `–ù–∞–π–¥–µ–Ω–æ ${rootCategories.length} –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedRootCount}`,
            priority: 'MEDIUM',
            rootCategoriesCount: rootCategories.length
          }
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const testCategories = categories.filter(cat => 
        cat.name && (
          cat.name.toLowerCase().includes('test') ||
          cat.name.toLowerCase().includes('—Ç–µ—Å—Ç') ||
          cat.name.includes('xxx')
        )
      );
      
      if (testCategories.length === 0) {
        logTestResult(
          '–û—á–∏—Å—Ç–∫–∞: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
          'PASS',
          {
            note: '–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'
          }
        );
        
        testResults.regression.push({
          test: 'Test Categories Cleanup',
          status: 'FIXED'
        });
      } else {
        logTestResult(
          '–û—á–∏—Å—Ç–∫–∞: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
          'FAIL',
          {
            error: `–ù–∞–π–¥–µ–Ω–æ ${testCategories.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`,
            priority: 'LOW',
            testCategories: testCategories.map(cat => cat.name)
          }
        );
      }
      
    } catch (error) {
      logTestResult(
        '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö',
        'FAIL',
        {
          error: `JSON Parse Error: ${error.message}`,
          priority: 'HIGH'
        }
      );
    }
  } else {
    logTestResult(
      '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: API –∑–∞–ø—Ä–æ—Å',
      'FAIL',
      {
        error: result.error || `HTTP ${result.response?.status}`,
        priority: 'HIGH'
      }
    );
  }
}

/**
 * –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
 */
async function testSearchFunctionality() {
  console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê');
  
  const searchQueries = [
    '–ø—Ä–æ—Ç–µ–∑',
    '–∫–∏—Å—Ç—å',
    '—Å—Ç–æ–ø–∞',
    '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π'
  ];
  
  for (const query of searchQueries) {
    const url = `${CONFIG.BASE_URL}/api/search?q=${encodeURIComponent(query)}`;
    const result = await fetchWithTiming(url);
    
    if (result.success && result.response.ok) {
      try {
        const searchResults = await result.response.json();
        const isPerformant = result.timing <= CONFIG.PERFORMANCE_THRESHOLDS.SEARCH;
        
        logTestResult(
          `–ü–æ–∏—Å–∫: "${query}"`,
          'PASS',
          {
            timing: result.timing,
            threshold: CONFIG.PERFORMANCE_THRESHOLDS.SEARCH,
            performant: isPerformant,
            resultsCount: searchResults.length || 0
          }
        );
        
        if (!isPerformant) {
          testResults.issues.push({
            test: `–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: "${query}"`,
            error: `–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ ${result.timing}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${CONFIG.PERFORMANCE_THRESHOLDS.SEARCH}ms`,
            priority: 'MEDIUM'
          });
        }
      } catch (error) {
        logTestResult(
          `–ü–æ–∏—Å–∫: "${query}"`,
          'FAIL',
          {
            error: `JSON Parse Error: ${error.message}`,
            priority: 'MEDIUM'
          }
        );
      }
    } else {
      logTestResult(
        `–ü–æ–∏—Å–∫: "${query}"`,
        'FAIL',
        {
          error: result.error || `HTTP ${result.response?.status}`,
          priority: 'MEDIUM'
        }
      );
    }
  }
}

/**
 * –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–µ–∑ Redis
 */
async function testNoRedisCompatibility() {
  console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ë–ï–ó REDIS');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Redis
  const redisUrl = `${CONFIG.BASE_URL}/api/redis-status`;
  const redisResult = await fetchWithTiming(redisUrl);
  
  if (!redisResult.success || !redisResult.response.ok) {
    logTestResult(
      'Redis: –°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è',
      'PASS',
      {
        note: 'Redis –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω',
        expectedError: true
      }
    );
  } else {
    logTestResult(
      'Redis: –°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è',
      'FAIL',
      {
        error: 'Redis —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω',
        priority: 'LOW'
      }
    );
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis
  const criticalPages = [
    `${CONFIG.BASE_URL}/`,
    `${CONFIG.BASE_URL}/api/products`,
    `${CONFIG.BASE_URL}/api/categories`
  ];
  
  let workingPagesCount = 0;
  for (const url of criticalPages) {
    const result = await fetchWithTiming(url);
    if (result.success && result.response.ok) {
      workingPagesCount++;
    }
  }
  
  if (workingPagesCount === criticalPages.length) {
    logTestResult(
      'Fallback: –†–∞–±–æ—Ç–∞ –±–µ–∑ Redis',
      'PASS',
      {
        note: '–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ Redis',
        workingPages: workingPagesCount,
        totalPages: criticalPages.length
      }
    );
    
    testResults.regression.push({
      test: 'No Redis Compatibility',
      status: 'CONFIRMED'
    });
  } else {
    logTestResult(
      'Fallback: –†–∞–±–æ—Ç–∞ –±–µ–∑ Redis',
      'FAIL',
      {
        error: `–¢–æ–ª—å–∫–æ ${workingPagesCount} –∏–∑ ${criticalPages.length} —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–±–æ—Ç–∞—é—Ç`,
        priority: 'HIGH'
      }
    );
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
async function generateTestReport() {
  testResults.endTime = new Date();
  const duration = testResults.endTime - testResults.startTime;
  
  const report = {
    summary: {
      testSuite: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤',
      timestamp: testResults.startTime,
      duration: `${Math.round(duration / 1000)}s`,
      totalTests: testResults.totalTests,
      passed: testResults.passedTests,
      failed: testResults.failedTests,
      skipped: testResults.skippedTests,
      successRate: `${Math.round((testResults.passedTests / testResults.totalTests) * 100)}%`
    },
    performanceMetrics: {
      averagePageLoad: Math.round(
        testResults.performance
          .filter(p => p.threshold === CONFIG.PERFORMANCE_THRESHOLDS.PAGE_LOAD)
          .reduce((sum, p) => sum + p.timing, 0) / 
        testResults.performance
          .filter(p => p.threshold === CONFIG.PERFORMANCE_THRESHOLDS.PAGE_LOAD).length || 1
      ),
      averageAPIResponse: Math.round(
        testResults.performance
          .filter(p => p.threshold === CONFIG.PERFORMANCE_THRESHOLDS.API_RESPONSE)
          .reduce((sum, p) => sum + p.timing, 0) / 
        testResults.performance
          .filter(p => p.threshold === CONFIG.PERFORMANCE_THRESHOLDS.API_RESPONSE).length || 1
      )
    },
    regressionValidation: {
      product371: testResults.regression.filter(r => r.test.includes('Product ID 371')),
      categoriesStructure: testResults.regression.filter(r => r.test.includes('Categories')),
      noRedisCompatibility: testResults.regression.filter(r => r.test.includes('Redis'))
    },
    issues: testResults.issues,
    detailedResults: testResults.results
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportPath = path.join(process.cwd(), 'comprehensive-test-report.json');
  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
  
  return report;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runComprehensiveTesting() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´');
  console.log(`üìç –ë–∞–∑–æ–≤—ã–π URL: ${CONFIG.BASE_URL}`);
  console.log(`‚è±Ô∏è –ù–∞—á–∞–ª–æ: ${testResults.startTime.toISOString()}`);
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    await testMainPages();
    await testAPIEndpoints();
    await testRegressionProductID371();
    await testCategoriesStructure();
    await testSearchFunctionality();
    await testNoRedisCompatibility();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = await generateTestReport();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${report.summary.passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${report.summary.failed}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${report.summary.skipped}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${report.summary.successRate}`);
    console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${report.summary.duration}`);
    
    if (testResults.issues.length > 0) {
      console.log(`\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (${testResults.issues.length}):`);
      testResults.issues.forEach((issue, index) => {
        console.log(`${index + 1}. [${issue.priority}] ${issue.test}: ${issue.error}`);
      });
    }
    
    console.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: comprehensive-test-report.json`);
    
    return report;
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runComprehensiveTesting()
    .then(() => {
      console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = {
  runComprehensiveTesting,
  generateTestReport,
  CONFIG
};