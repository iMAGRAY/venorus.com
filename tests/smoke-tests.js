#!/usr/bin/env node

/**
 * –î–´–ú–û–í–´–ï –¢–ï–°–¢–´ –î–õ–Ø MEDSIP.PROTEZ
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
 * 
 * –ó–∞–ø—É—Å–∫: node tests/smoke-tests.js
 */

const http = require('http');
const https = require('https');
const { URL } = require('url');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.TEST_URL || 'http://localhost:3009';
const TIMEOUT = 5000;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m'
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
let skippedTests = 0;

// –£—Ç–∏–ª–∏—Ç—ã
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(name, status, message = '') {
  const icon = status === 'pass' ? '‚úÖ' : status === 'fail' ? '‚ùå' : '‚è≠Ô∏è';
  const color = status === 'pass' ? 'green' : status === 'fail' ? 'red' : 'yellow';
  log(`  ${icon} ${name}${message ? ': ' + message : ''}`, color);
}

// HTTP –∫–ª–∏–µ–Ω—Ç
async function makeRequest(path, options = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    const client = url.protocol === 'https:' ? https : http;
    
    const reqOptions = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname + url.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      timeout: TIMEOUT
    };

    const req = client.request(reqOptions, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const json = data ? JSON.parse(data) : {};
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: json
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: data
          });
        }
      });
    });

    req.on('error', reject);
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }
    
    req.end();
  });
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function test(name, testFn) {
  totalTests++;
  try {
    await testFn();
    passedTests++;
    logTest(name, 'pass');
    return true;
  } catch (error) {
    failedTests++;
    logTest(name, 'fail', error.message);
    return false;
  }
}

function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'Assertion failed');
  }
}

// –ì–†–£–ü–ü–ê –¢–ï–°–¢–û–í: –ë–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
async function testBasicAvailability() {
  log('\nüì° –ë–ê–ó–û–í–ê–Ø –î–û–°–¢–£–ü–ù–û–°–¢–¨', 'cyan');
  
  await test('–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã', async () => {
    const res = await makeRequest('/api/health');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
  });

  await test('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', async () => {
    const res = await makeRequest('/api/db-status');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.status === 'ok', 'Database not connected');
  });

  await test('Security headers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', async () => {
    const res = await makeRequest('/api/health');
    assert(res.headers['x-frame-options'], 'X-Frame-Options header missing');
    assert(res.headers['x-content-type-options'], 'X-Content-Type-Options header missing');
    assert(res.headers['content-security-policy'], 'CSP header missing');
  });
}

// –ì–†–£–ü–ü–ê –¢–ï–°–¢–û–í: API Endpoints
async function testAPIEndpoints() {
  log('\nüîå API ENDPOINTS', 'cyan');
  
  await test('GET /api/products —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const res = await makeRequest('/api/products?limit=1');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'API returned success: false');
    assert(Array.isArray(res.data.data), 'Products data is not an array');
  });

  await test('GET /api/categories —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const res = await makeRequest('/api/categories');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'API returned success: false');
    assert(Array.isArray(res.data.data), 'Categories data is not an array');
  });

  await test('GET /api/manufacturers —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const res = await makeRequest('/api/manufacturers');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'API returned success: false');
  });

  await test('GET /api/products/:id —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const listRes = await makeRequest('/api/products?limit=1');
    if (listRes.data.data && listRes.data.data.length > 0) {
      const productId = listRes.data.data[0].id;
      const res = await makeRequest(`/api/products/${productId}`);
      assert(res.status === 200, `Expected 200, got ${res.status}`);
      assert(res.data.success === true, 'API returned success: false');
      assert(res.data.data.id === productId, 'Product ID mismatch');
    } else {
      throw new Error('No products found to test');
    }
  });

  await test('GET /api/characteristics —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const res = await makeRequest('/api/characteristics');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'API returned success: false');
  });
}

// –ì–†–£–ü–ü–ê –¢–ï–°–¢–û–í: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
async function testAuthentication() {
  log('\nüîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø', 'cyan');
  
  await test('POST /api/admin/auth/login —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
    const res = await makeRequest('/api/admin/auth/login', {
      method: 'POST',
      body: {
        username: 'wrong_user',
        password: 'wrong_password'
      }
    });
    assert(res.status === 401 || res.status === 403, `Expected 401/403, got ${res.status}`);
  });

  await test('GET /api/admin/auth/status –±–µ–∑ —Å–µ—Å—Å–∏–∏', async () => {
    const res = await makeRequest('/api/admin/auth/status');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.authenticated === false, 'Should not be authenticated');
  });

  await test('Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    // –î–µ–ª–∞–µ–º 10 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ª–æ–≥–∏–Ω
    const promises = [];
    for (let i = 0; i < 10; i++) {
      promises.push(makeRequest('/api/admin/auth/login', {
        method: 'POST',
        body: {
          username: `test_${i}`,
          password: 'test'
        }
      }).catch(e => ({ status: 429 })));
    }
    
    const results = await Promise.all(promises);
    const rateLimited = results.some(r => r.status === 429);
    assert(rateLimited, 'Rate limiting not working');
  });
}

// –ì–†–£–ü–ü–ê –¢–ï–°–¢–û–í: –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
async function testSearchAndFilter() {
  log('\nüîç –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø', 'cyan');
  
  await test('GET /api/products/search —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const res = await makeRequest('/api/products/search?q=–º–æ–¥—É–ª—å');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'API returned success: false');
  });

  await test('–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const res = await makeRequest('/api/products?page=1&limit=5');
    assert(res.status === 200, `Expected 200, got ${res.status}`);
    assert(res.data.success === true, 'API returned success: false');
    assert(res.data.data.length <= 5, 'Limit not working');
  });

  await test('–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const categoriesRes = await makeRequest('/api/categories');
    if (categoriesRes.data.data && categoriesRes.data.data.length > 0) {
      const categoryId = categoriesRes.data.data[0].id;
      const res = await makeRequest(`/api/products?category_id=${categoryId}`);
      assert(res.status === 200, `Expected 200, got ${res.status}`);
    } else {
      throw new Error('No categories found to test');
    }
  });
}

// –ì–†–£–ü–ü–ê –¢–ï–°–¢–û–í: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async function testErrorHandling() {
  log('\n‚ö†Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö', 'cyan');
  
  await test('404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞', async () => {
    const res = await makeRequest('/api/nonexistent-endpoint-xyz');
    assert(res.status === 404, `Expected 404, got ${res.status}`);
  });

  await test('400 –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
    const res = await makeRequest('/api/products/not-a-number');
    assert(res.status === 400 || res.status === 404, `Expected 400/404, got ${res.status}`);
  });

  await test('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const res = await makeRequest('/api/admin/auth/login', {
      method: 'POST',
      body: {} // –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ
    });
    assert(res.status === 400, `Expected 400, got ${res.status}`);
  });
}

// –ì–†–£–ü–ü–ê –¢–ï–°–¢–û–í: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
async function testPerformance() {
  log('\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨', 'cyan');
  
  await test('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ', async () => {
    const start = Date.now();
    await makeRequest('/');
    const duration = Date.now() - start;
    assert(duration < 3000, `Page load took ${duration}ms (>3000ms)`);
  });

  await test('API –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ', async () => {
    const start = Date.now();
    await makeRequest('/api/products?limit=10');
    const duration = Date.now() - start;
    assert(duration < 1000, `API response took ${duration}ms (>1000ms)`);
  });

  await test('Health check –±—ã—Å—Ç—Ä—ã–π', async () => {
    const start = Date.now();
    await makeRequest('/api/health');
    const duration = Date.now() - start;
    assert(duration < 200, `Health check took ${duration}ms (>200ms)`);
  });
}

// –ì–†–£–ü–ü–ê –¢–ï–°–¢–û–í: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∏–∑–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–∏
async function testBusinessLogic() {
  log('\nüíº –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê', 'cyan');
  
  await test('–ü—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É', async () => {
    const res = await makeRequest('/api/products?limit=1');
    if (res.data.data && res.data.data.length > 0) {
      const product = res.data.data[0];
      assert(product.id, 'Product missing ID');
      assert(product.name, 'Product missing name');
      assert(product.sku, 'Product missing SKU');
      assert('price' in product, 'Product missing price field');
      assert('stock_status' in product, 'Product missing stock_status');
    }
  });

  await test('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É', async () => {
    const res = await makeRequest('/api/categories');
    if (res.data.data && res.data.data.length > 0) {
      const hasParentChild = res.data.data.some(cat => 
        cat.children && cat.children.length > 0
      );
      assert(hasParentChild || res.data.data.length === 1, 'No category hierarchy found');
    }
  });

  await test('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è', async () => {
    const productsRes = await makeRequest('/api/products?limit=1');
    if (productsRes.data.data && productsRes.data.data.length > 0) {
      const productId = productsRes.data.data[0].id;
      const res = await makeRequest(`/api/products/${productId}/characteristics-simple`);
      assert(res.status === 200, `Expected 200, got ${res.status}`);
      assert(res.data.success === true, 'Characteristics API failed');
    }
  });
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
async function runSmokeTests() {
  log('\n' + '='.repeat(60), 'bold');
  log('üî• –î–´–ú–û–í–´–ï –¢–ï–°–¢–´ MEDSIP.PROTEZ', 'bold');
  log('='.repeat(60), 'bold');
  log(`üìç URL: ${BASE_URL}`, 'blue');
  log(`‚è±Ô∏è  Timeout: ${TIMEOUT}ms`, 'blue');
  
  const startTime = Date.now();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    await makeRequest('/api/health');
  } catch (error) {
    log('\n‚ùå –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!', 'red');
    log(`–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${BASE_URL}`, 'yellow');
    log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev', 'yellow');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–æ–≤
  await testBasicAvailability();
  await testAPIEndpoints();
  await testAuthentication();
  await testSearchAndFilter();
  await testErrorHandling();
  await testPerformance();
  await testBusinessLogic();
  
  // –ò—Ç–æ–≥–∏
  const duration = Date.now() - startTime;
  
  log('\n' + '='.repeat(60), 'bold');
  log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bold');
  log('='.repeat(60), 'bold');
  
  log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`, 'blue');
  log(`üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`, failedTests > 0 ? 'red' : 'green');
  log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedTests}`, skippedTests > 0 ? 'yellow' : 'green');
  
  const successRate = Math.round((passedTests / totalTests) * 100);
  const rateColor = successRate === 100 ? 'green' : successRate >= 80 ? 'yellow' : 'red';
  
  log(`\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, rateColor);
  
  if (failedTests === 0) {
    log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
  } else {
    log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.', 'red');
  }
  
  // Exit –∫–æ–¥ –¥–ª—è CI/CD
  process.exit(failedTests > 0 ? 1 : 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  console.error(error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runSmokeTests().catch(error => {
  log('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', 'red');
  console.error(error);
  process.exit(1);
});