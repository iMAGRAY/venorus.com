/**
 * –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –ò –°–¢–†–ï–°–° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π:
 * - –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (50-100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
 * - –°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç–∫–∞–∑–∞)
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 
 * @author QA Automation Specialist
 * @created 2025-08-16
 */

const fetch = require('node-fetch');
const fs = require('fs').promises;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const LOAD_CONFIG = {
  BASE_URL: 'http://localhost:3010',
  TESTS: {
    LIGHT_LOAD: { concurrent: 10, duration: 30 },    // –õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    MODERATE_LOAD: { concurrent: 50, duration: 60 },  // –£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    HEAVY_LOAD: { concurrent: 100, duration: 30 },    // –¢—è–∂–µ–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    STRESS_TEST: { concurrent: 200, duration: 15 }    // –°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç
  },
  ENDPOINTS: [
    { path: '/api/health', weight: 0.1, critical: true },
    { path: '/api/categories', weight: 0.3, critical: true },
    { path: '/api/products', weight: 0.4, critical: true },
    { path: '/api/manufacturers', weight: 0.15, critical: false },
    { path: '/api/search?q=–ø—Ä–æ—Ç–µ–∑', weight: 0.05, critical: false }
  ],
  THRESHOLDS: {
    SUCCESS_RATE: 95,     // 95% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    AVG_RESPONSE: 2000,   // 2 —Å–µ–∫—É–Ω–¥—ã —Å—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    P95_RESPONSE: 5000,   // 5 —Å–µ–∫—É–Ω–¥ 95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å
    MAX_ERRORS: 5         // –ú–∞–∫—Å–∏–º—É–º 5% –æ—à–∏–±–æ–∫
  }
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const loadTestResults = {
  startTime: new Date(),
  endTime: null,
  tests: [],
  summary: {
    totalRequests: 0,
    successfulRequests: 0,
    failedRequests: 0,
    successRate: 0,
    avgResponseTime: 0,
    minResponseTime: Infinity,
    maxResponseTime: 0,
    p95ResponseTime: 0,
    requestsPerSecond: 0
  },
  issues: [],
  recommendations: []
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
 */
async function makeRequest(url, requestId) {
  const startTime = Date.now();
  
  try {
    const response = await fetch(url, {
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      headers: {
        'User-Agent': `LoadTest-${requestId}`,
        'Accept': 'application/json'
      }
    });
    
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    return {
      success: true,
      status: response.status,
      responseTime,
      timestamp: startTime,
      size: parseInt(response.headers.get('content-length') || '0'),
      url
    };
  } catch (error) {
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    return {
      success: false,
      status: 0,
      responseTime,
      timestamp: startTime,
      error: error.message,
      url
    };
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ endpoint –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
 */
function selectRandomEndpoint() {
  const random = Math.random();
  let cumulativeWeight = 0;
  
  for (const endpoint of LOAD_CONFIG.ENDPOINTS) {
    cumulativeWeight += endpoint.weight;
    if (random <= cumulativeWeight) {
      return `${LOAD_CONFIG.BASE_URL}${endpoint.path}`;
    }
  }
  
  // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π endpoint
  return `${LOAD_CONFIG.BASE_URL}${LOAD_CONFIG.ENDPOINTS[0].path}`;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
 */
async function runLoadTest(testName, config) {
  console.log(`\nüî• –ó–∞–ø—É—Å–∫ ${testName}:`);
  console.log(`   –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${config.concurrent}`);
  console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${config.duration}s`);
  
  const testResults = {
    name: testName,
    config,
    startTime: Date.now(),
    requests: [],
    metrics: {}
  };
  
  const promises = [];
  const requestInterval = (config.duration * 1000) / (config.concurrent * 10); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  for (let i = 0; i < config.concurrent; i++) {
    const workerPromise = async () => {
      const endTime = Date.now() + (config.duration * 1000);
      let requestCount = 0;
      
      while (Date.now() < endTime) {
        const url = selectRandomEndpoint();
        const requestId = `${testName}-${i}-${requestCount}`;
        
        const result = await makeRequest(url, requestId);
        testResults.requests.push(result);
        
        requestCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        if (requestInterval > 0) {
          await new Promise(resolve => setTimeout(resolve, requestInterval));
        }
      }
    };
    
    promises.push(workerPromise());
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö worker'–æ–≤
  await Promise.all(promises);
  
  testResults.endTime = Date.now();
  testResults.duration = testResults.endTime - testResults.startTime;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
  calculateMetrics(testResults);
  
  loadTestResults.tests.push(testResults);
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log(`   ‚úÖ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${testResults.requests.length}`);
  console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${testResults.metrics.successRate.toFixed(2)}%`);
  console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${testResults.metrics.avgResponseTime.toFixed(0)}ms`);
  console.log(`   üìä 95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: ${testResults.metrics.p95ResponseTime.toFixed(0)}ms`);
  console.log(`   üîÑ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${testResults.metrics.requestsPerSecond.toFixed(2)}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Ä–æ–≥–∞–º
  validateThresholds(testResults);
  
  return testResults;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function calculateMetrics(testResults) {
  const { requests } = testResults;
  
  if (requests.length === 0) {
    testResults.metrics = {
      successRate: 0,
      avgResponseTime: 0,
      minResponseTime: 0,
      maxResponseTime: 0,
      p95ResponseTime: 0,
      requestsPerSecond: 0
    };
    return;
  }
  
  const successfulRequests = requests.filter(r => r.success);
  const responseTimes = requests.map(r => r.responseTime);
  const sortedResponseTimes = responseTimes.sort((a, b) => a - b);
  
  const successRate = (successfulRequests.length / requests.length) * 100;
  const avgResponseTime = responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length;
  const minResponseTime = Math.min(...responseTimes);
  const maxResponseTime = Math.max(...responseTimes);
  const p95Index = Math.floor(responseTimes.length * 0.95);
  const p95ResponseTime = sortedResponseTimes[p95Index] || 0;
  const requestsPerSecond = (requests.length / (testResults.duration / 1000));
  
  testResults.metrics = {
    successRate,
    avgResponseTime,
    minResponseTime,
    maxResponseTime,
    p95ResponseTime,
    requestsPerSecond,
    totalRequests: requests.length,
    successfulRequests: successfulRequests.length,
    failedRequests: requests.length - successfulRequests.length
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  loadTestResults.summary.totalRequests += requests.length;
  loadTestResults.summary.successfulRequests += successfulRequests.length;
  loadTestResults.summary.failedRequests += (requests.length - successfulRequests.length);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Ä–æ–≥–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function validateThresholds(testResults) {
  const { metrics } = testResults;
  const { THRESHOLDS } = LOAD_CONFIG;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (metrics.successRate < THRESHOLDS.SUCCESS_RATE) {
    const issue = {
      test: testResults.name,
      metric: 'Success Rate',
      value: `${metrics.successRate.toFixed(2)}%`,
      threshold: `${THRESHOLDS.SUCCESS_RATE}%`,
      priority: 'HIGH',
      description: '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∏–∂–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø–æ—Ä–æ–≥–∞'
    };
    loadTestResults.issues.push(issue);
    console.log(`   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å ${metrics.successRate.toFixed(2)}% < ${THRESHOLDS.SUCCESS_RATE}%`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
  if (metrics.avgResponseTime > THRESHOLDS.AVG_RESPONSE) {
    const issue = {
      test: testResults.name,
      metric: 'Average Response Time',
      value: `${metrics.avgResponseTime.toFixed(0)}ms`,
      threshold: `${THRESHOLDS.AVG_RESPONSE}ms`,
      priority: 'MEDIUM',
      description: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ—Ä–æ–≥'
    };
    loadTestResults.issues.push(issue);
    console.log(`   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ${metrics.avgResponseTime.toFixed(0)}ms > ${THRESHOLDS.AVG_RESPONSE}ms`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 95-–≥–æ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è
  if (metrics.p95ResponseTime > THRESHOLDS.P95_RESPONSE) {
    const issue = {
      test: testResults.name,
      metric: '95th Percentile Response Time',
      value: `${metrics.p95ResponseTime.toFixed(0)}ms`,
      threshold: `${THRESHOLDS.P95_RESPONSE}ms`,
      priority: 'MEDIUM',
      description: '95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ—Ä–æ–≥'
    };
    loadTestResults.issues.push(issue);
    console.log(`   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: P95 –≤—Ä–µ–º—è ${metrics.p95ResponseTime.toFixed(0)}ms > ${THRESHOLDS.P95_RESPONSE}ms`);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
function generateRecommendations() {
  const { summary, issues } = loadTestResults;
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (summary.avgResponseTime > 1000) {
    loadTestResults.recommendations.push({
      category: 'Performance',
      priority: 'HIGH',
      title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ API',
      description: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.',
      actions: [
        '–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –ë–î',
        '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è API endpoints',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å N+1 –∑–∞–ø—Ä–æ—Å—ã –≤ ORM',
        '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ connection pooling'
      ]
    });
  }
  
  if (summary.successRate < 95) {
    loadTestResults.recommendations.push({
      category: 'Reliability',
      priority: 'CRITICAL',
      title: '–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã',
      description: '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∏–∂–µ 95%. –°–∏—Å—Ç–µ–º–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π.',
      actions: [
        '–£–≤–µ–ª–∏—á–∏—Ç—å timeout –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤',
        '–î–æ–±–∞–≤–∏—Ç—å retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
        '–£–ª—É—á—à–∏—Ç—å error handling –≤ API endpoints',
        '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ'
      ]
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
  const maxRPS = Math.max(...loadTestResults.tests.map(t => t.metrics.requestsPerSecond));
  if (maxRPS < 50) {
    loadTestResults.recommendations.push({
      category: 'Scalability',
      priority: 'MEDIUM',
      title: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
      description: '–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω–µ–µ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É. –î–ª—è production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.',
      actions: [
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
        '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        '–î–æ–±–∞–≤–∏—Ç—å load balancer –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏',
        '–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞ (CPU, RAM)'
      ]
    });
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runComprehensiveLoadTesting() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log(`üìç –ë–∞–∑–æ–≤—ã–π URL: ${LOAD_CONFIG.BASE_URL}`);
  console.log(`‚è±Ô∏è –ù–∞—á–∞–ª–æ: ${loadTestResults.startTime.toISOString()}`);
  
  try {
    // –¢–µ—Å—Ç 1: –õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (–±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç)
    await runLoadTest('–õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', LOAD_CONFIG.TESTS.LIGHT_LOAD);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    console.log('\n‚è∏Ô∏è –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // –¢–µ—Å—Ç 2: –£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    await runLoadTest('–£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', LOAD_CONFIG.TESTS.MODERATE_LOAD);
    
    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ç—è–∂–µ–ª—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
    console.log('\n‚è∏Ô∏è –ü–∞—É–∑–∞ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ç—è–∂–µ–ª—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏...');
    await new Promise(resolve => setTimeout(resolve, 15000));
    
    // –¢–µ—Å—Ç 3: –¢—è–∂–µ–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    await runLoadTest('–¢—è–∂–µ–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', LOAD_CONFIG.TESTS.HEAVY_LOAD);
    
    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç–æ–º
    console.log('\n‚è∏Ô∏è –ü–∞—É–∑–∞ 20 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç–æ–º...');
    await new Promise(resolve => setTimeout(resolve, 20000));
    
    // –¢–µ—Å—Ç 4: –°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç–∫–∞–∑–∞)
    await runLoadTest('–°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç', LOAD_CONFIG.TESTS.STRESS_TEST);
    
    // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    loadTestResults.endTime = new Date();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (loadTestResults.summary.totalRequests > 0) {
      loadTestResults.summary.successRate = 
        (loadTestResults.summary.successfulRequests / loadTestResults.summary.totalRequests) * 100;
      
      const allResponseTimes = loadTestResults.tests
        .flatMap(test => test.requests.map(req => req.responseTime));
      
      loadTestResults.summary.avgResponseTime = 
        allResponseTimes.reduce((sum, time) => sum + time, 0) / allResponseTimes.length;
      
      loadTestResults.summary.minResponseTime = Math.min(...allResponseTimes);
      loadTestResults.summary.maxResponseTime = Math.max(...allResponseTimes);
      
      const sortedTimes = allResponseTimes.sort((a, b) => a - b);
      const p95Index = Math.floor(allResponseTimes.length * 0.95);
      loadTestResults.summary.p95ResponseTime = sortedTimes[p95Index] || 0;
      
      const totalDuration = (loadTestResults.endTime - loadTestResults.startTime) / 1000;
      loadTestResults.summary.requestsPerSecond = loadTestResults.summary.totalRequests / totalDuration;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generateRecommendations();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    await saveLoadTestReport();
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    printFinalResults();
    
    return loadTestResults;
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function saveLoadTestReport() {
  const reportPath = 'load-stress-test-report.json';
  await fs.writeFile(reportPath, JSON.stringify(loadTestResults, null, 2));
  console.log(`\nüìÑ –û—Ç—á–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function printFinalResults() {
  const { summary, issues, recommendations } = loadTestResults;
  
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${summary.totalRequests}`);
  console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${summary.successfulRequests} (${summary.successRate.toFixed(2)}%)`);
  console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${summary.failedRequests}`);
  console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${summary.avgResponseTime.toFixed(0)}ms`);
  console.log(`   Min/Max –≤—Ä–µ–º—è: ${summary.minResponseTime}ms / ${summary.maxResponseTime}ms`);
  console.log(`   95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: ${summary.p95ResponseTime.toFixed(0)}ms`);
  console.log(`   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${summary.requestsPerSecond.toFixed(2)}`);
  
  if (issues.length > 0) {
    console.log(`\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (${issues.length}):`);
    issues.forEach((issue, index) => {
      console.log(`${index + 1}. [${issue.priority}] ${issue.test} - ${issue.metric}:`);
      console.log(`   ${issue.description}`);
      console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ: ${issue.value}, –ü–æ—Ä–æ–≥: ${issue.threshold}`);
    });
  }
  
  if (recommendations.length > 0) {
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (${recommendations.length}):`);
    recommendations.forEach((rec, index) => {
      console.log(`${index + 1}. [${rec.priority}] ${rec.title}:`);
      console.log(`   ${rec.description}`);
      console.log(`   –î–µ–π—Å—Ç–≤–∏—è:`);
      rec.actions.forEach((action, actionIndex) => {
        console.log(`     ${actionIndex + 1}) ${action}`);
      });
    });
  }
  
  // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  let performanceGrade = 'A';
  if (summary.successRate < 95) performanceGrade = 'F';
  else if (summary.avgResponseTime > 2000) performanceGrade = 'D';
  else if (summary.avgResponseTime > 1000) performanceGrade = 'C';
  else if (summary.avgResponseTime > 500) performanceGrade = 'B';
  
  console.log(`\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: ${performanceGrade}`);
  
  const duration = (loadTestResults.endTime - loadTestResults.startTime) / 1000;
  console.log(`‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${Math.round(duration)}s`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runComprehensiveLoadTesting()
    .then(() => {
      console.log('‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = {
  runComprehensiveLoadTesting,
  LOAD_CONFIG
};