#!/usr/bin/env node

/**
 * –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ò –ù–ê–ì–†–£–ó–ö–ò –î–õ–Ø MEDSIP.PROTEZ
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
 * 
 * –ó–∞–ø—É—Å–∫: node tests/performance/load-tests.js
 */

const http = require('http');
const https = require('https');
const { URL } = require('url');
const { performance } = require('perf_hooks');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.TEST_URL || 'http://localhost:3009';
const TIMEOUT = 30000; // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
const LOAD_CONFIG = {
  small: { concurrent: 5, requests: 20 },      // –ú–∞–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
  medium: { concurrent: 10, requests: 50 },    // –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
  large: { concurrent: 20, requests: 100 },    // –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
  stress: { concurrent: 50, requests: 200 }    // –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
};

// –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const THRESHOLDS = {
  api: {
    p50: 200,   // 50% –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–µ–µ
    p90: 500,   // 90% –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–µ–µ
    p95: 1000,  // 95% –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–µ–µ
    p99: 2000   // 99% –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–µ–µ
  },
  page: {
    p50: 500,
    p90: 1000,
    p95: 2000,
    p99: 3000
  },
  database: {
    p50: 50,
    p90: 100,
    p95: 200,
    p99: 500
  }
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
  dim: '\x1b[2m'
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let testResults = [];

// –£—Ç–∏–ª–∏—Ç—ã
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logMetric(name, value, unit = 'ms', threshold = null) {
  let color = 'blue';
  let status = '';
  
  if (threshold) {
    if (value <= threshold) {
      color = 'green';
      status = ' ‚úÖ';
    } else if (value <= threshold * 1.5) {
      color = 'yellow';
      status = ' ‚ö†Ô∏è';
    } else {
      color = 'red';
      status = ' ‚ùå';
    }
  }
  
  log(`  ${name}: ${value.toFixed(2)}${unit}${status}`, color);
}

// HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class LoadTestClient {
  constructor(baseUrl) {
    this.baseUrl = baseUrl;
    this.metrics = [];
  }

  async request(path, options = {}) {
    const startTime = performance.now();
    
    return new Promise((resolve, reject) => {
      const url = new URL(path, this.baseUrl);
      const client = url.protocol === 'https:' ? https : http;
      
      const reqOptions = {
        hostname: url.hostname,
        port: url.port,
        path: url.pathname + url.search,
        method: options.method || 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Connection': 'keep-alive',
          ...options.headers
        },
        timeout: TIMEOUT,
        agent: new (url.protocol === 'https:' ? https : http).Agent({
          keepAlive: true,
          maxSockets: 100
        })
      };

      const req = client.request(reqOptions, (res) => {
        let data = '';
        const firstByteTime = performance.now() - startTime;
        
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          const totalTime = performance.now() - startTime;
          
          const metric = {
            path,
            status: res.statusCode,
            ttfb: firstByteTime,  // Time to first byte
            total: totalTime,
            size: data.length,
            timestamp: Date.now()
          };
          
          this.metrics.push(metric);
          
          resolve({
            ...metric,
            data: data
          });
        });
      });

      req.on('error', (error) => {
        const totalTime = performance.now() - startTime;
        
        const metric = {
          path,
          status: 0,
          error: error.message,
          total: totalTime,
          timestamp: Date.now()
        };
        
        this.metrics.push(metric);
        reject(error);
      });

      req.on('timeout', () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      if (options.body) {
        req.write(JSON.stringify(options.body));
      }
      
      req.end();
    });
  }

  getMetrics() {
    if (this.metrics.length === 0) return null;
    
    const successfulRequests = this.metrics.filter(m => m.status >= 200 && m.status < 400);
    const failedRequests = this.metrics.filter(m => m.status === 0 || m.status >= 400);
    
    const times = successfulRequests.map(m => m.total).sort((a, b) => a - b);
    const ttfbs = successfulRequests.map(m => m.ttfb).filter(t => t).sort((a, b) => a - b);
    
    return {
      total: this.metrics.length,
      successful: successfulRequests.length,
      failed: failedRequests.length,
      errorRate: (failedRequests.length / this.metrics.length) * 100,
      
      // –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
      min: times[0] || 0,
      max: times[times.length - 1] || 0,
      mean: times.length > 0 ? times.reduce((a, b) => a + b, 0) / times.length : 0,
      median: times[Math.floor(times.length / 2)] || 0,
      p50: times[Math.floor(times.length * 0.5)] || 0,
      p90: times[Math.floor(times.length * 0.9)] || 0,
      p95: times[Math.floor(times.length * 0.95)] || 0,
      p99: times[Math.floor(times.length * 0.99)] || 0,
      
      // Time to first byte
      ttfb_mean: ttfbs.length > 0 ? ttfbs.reduce((a, b) => a + b, 0) / ttfbs.length : 0,
      ttfb_median: ttfbs[Math.floor(ttfbs.length / 2)] || 0,
      
      // –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
      totalBytes: successfulRequests.reduce((sum, m) => sum + (m.size || 0), 0),
      requestsPerSecond: 0, // –í—ã—á–∏—Å–ª–∏—Ç—Å—è –ø–æ–∑–∂–µ
      
      // –û—à–∏–±–∫–∏
      errors: failedRequests.map(m => m.error).filter(e => e)
    };
  }

  reset() {
    this.metrics = [];
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runConcurrentRequests(client, endpoint, count, concurrent) {
  const startTime = performance.now();
  const promises = [];
  
  for (let i = 0; i < count; i++) {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (promises.length >= concurrent) {
      await Promise.race(promises.map((p, idx) => p.then(() => idx)))
        .then(idx => promises.splice(idx, 1));
    }
    
    const promise = client.request(endpoint)
      .catch(error => ({ error: error.message }));
    promises.push(promise);
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  await Promise.all(promises);
  
  const duration = (performance.now() - startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const metrics = client.getMetrics();
  
  if (metrics) {
    metrics.requestsPerSecond = metrics.successful / duration;
    metrics.duration = duration;
  }
  
  return metrics;
}

// –¢–ï–°–¢: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
async function testEndpointPerformance() {
  log('\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –û–°–ù–û–í–ù–´–• ENDPOINTS', 'cyan');
  
  const client = new LoadTestClient(BASE_URL);
  const endpoints = [
    { path: '/api/health', threshold: THRESHOLDS.api },
    { path: '/api/products?limit=10', threshold: THRESHOLDS.api },
    { path: '/api/categories', threshold: THRESHOLDS.api },
    { path: '/api/manufacturers', threshold: THRESHOLDS.api },
    { path: '/api/products/search?q=–ø—Ä–æ—Ç–µ–∑', threshold: THRESHOLDS.api }
  ];
  
  for (const endpoint of endpoints) {
    log(`\n  Testing: ${endpoint.path}`, 'dim');
    client.reset();
    
    const metrics = await runConcurrentRequests(
      client, 
      endpoint.path, 
      20,  // 20 –∑–∞–ø—Ä–æ—Å–æ–≤
      5    // 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    );
    
    if (metrics) {
      logMetric('P50', metrics.p50, 'ms', endpoint.threshold.p50);
      logMetric('P90', metrics.p90, 'ms', endpoint.threshold.p90);
      logMetric('P95', metrics.p95, 'ms', endpoint.threshold.p95);
      logMetric('P99', metrics.p99, 'ms', endpoint.threshold.p99);
      logMetric('RPS', metrics.requestsPerSecond, ' req/s');
      
      if (metrics.errorRate > 0) {
        log(`  Error rate: ${metrics.errorRate.toFixed(2)}%`, 'red');
      }
      
      testResults.push({
        endpoint: endpoint.path,
        metrics
      });
    }
  }
}

// –¢–ï–°–¢: –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async function testLoadScenarios() {
  log('\nüî• –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï', 'cyan');
  
  const scenarios = [
    { name: '–ú–∞–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', config: LOAD_CONFIG.small },
    { name: '–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞', config: LOAD_CONFIG.medium },
    { name: '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', config: LOAD_CONFIG.large }
  ];
  
  for (const scenario of scenarios) {
    log(`\n  ${scenario.name} (${scenario.config.concurrent} concurrent, ${scenario.config.requests} requests)`, 'bold');
    
    const client = new LoadTestClient(BASE_URL);
    const metrics = await runConcurrentRequests(
      client,
      '/api/products?limit=10',
      scenario.config.requests,
      scenario.config.concurrent
    );
    
    if (metrics) {
      log(`    –£—Å–ø–µ—à–Ω–æ: ${metrics.successful}/${metrics.total}`, 'green');
      log(`    –û—à–∏–±–∫–∏: ${metrics.failed}`, metrics.failed > 0 ? 'red' : 'green');
      logMetric('    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', metrics.mean);
      logMetric('    P95', metrics.p95);
      logMetric('    RPS', metrics.requestsPerSecond, ' req/s');
      
      testResults.push({
        scenario: scenario.name,
        metrics
      });
    }
  }
}

// –¢–ï–°–¢: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async function testStressScenario() {
  log('\nüí• –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï', 'cyan');
  log('  –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É!', 'yellow');
  
  const client = new LoadTestClient(BASE_URL);
  const config = LOAD_CONFIG.stress;
  
  log(`  –ó–∞–ø—É—Å–∫: ${config.concurrent} concurrent, ${config.requests} requests`, 'dim');
  
  const metrics = await runConcurrentRequests(
    client,
    '/api/products?limit=50',
    config.requests,
    config.concurrent
  );
  
  if (metrics) {
    log(`\n  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:`, 'bold');
    log(`    –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${metrics.total}`, 'blue');
    log(`    –£—Å–ø–µ—à–Ω—ã—Ö: ${metrics.successful} (${((metrics.successful/metrics.total)*100).toFixed(1)}%)`, 
        metrics.successful/metrics.total > 0.95 ? 'green' : 'red');
    log(`    –û—à–∏–±–æ–∫: ${metrics.failed} (${metrics.errorRate.toFixed(1)}%)`, 
        metrics.errorRate < 5 ? 'green' : 'red');
    
    logMetric('    –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è', metrics.min);
    logMetric('    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è', metrics.max);
    logMetric('    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', metrics.mean);
    logMetric('    P95', metrics.p95);
    logMetric('    P99', metrics.p99);
    logMetric('    RPS', metrics.requestsPerSecond, ' req/s');
    
    if (metrics.errors.length > 0) {
      log(`\n    –¢–∏–ø—ã –æ—à–∏–±–æ–∫:`, 'red');
      const errorCounts = {};
      metrics.errors.forEach(e => {
        errorCounts[e] = (errorCounts[e] || 0) + 1;
      });
      Object.entries(errorCounts).forEach(([error, count]) => {
        log(`      ${error}: ${count}`, 'dim');
      });
    }
    
    testResults.push({
      scenario: '–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç',
      metrics
    });
  }
}

// –¢–ï–°–¢: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function testDatabasePerformance() {
  log('\nüóÑÔ∏è –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ë–ê–ó–´ –î–ê–ù–ù–´–•', 'cyan');
  
  const client = new LoadTestClient(BASE_URL);
  const queries = [
    { name: 'Health check', path: '/api/db-status' },
    { name: '–ü—Ä–æ—Å—Ç–æ–π SELECT', path: '/api/products?limit=1' },
    { name: 'JOIN –∑–∞–ø—Ä–æ—Å', path: '/api/products?limit=10' },
    { name: '–ü–æ–∏—Å–∫ LIKE', path: '/api/products/search?q=–º–æ–¥' },
    { name: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è', path: '/api/categories' }
  ];
  
  for (const query of queries) {
    log(`\n  ${query.name}`, 'dim');
    client.reset();
    
    // –î–µ–ª–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    for (let i = 0; i < 10; i++) {
      await client.request(query.path).catch(() => {});
    }
    
    const metrics = client.getMetrics();
    if (metrics && metrics.successful > 0) {
      logMetric('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', metrics.mean, 'ms', THRESHOLDS.database.p50);
      logMetric('P90', metrics.p90, 'ms', THRESHOLDS.database.p90);
      logMetric('P95', metrics.p95, 'ms', THRESHOLDS.database.p95);
    }
  }
}

// –¢–ï–°–¢: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
async function testCachingPerformance() {
  log('\nüíæ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø', 'cyan');
  
  const client = new LoadTestClient(BASE_URL);
  const endpoint = '/api/categories'; // Endpoint –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å—Å—è
  
  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ö–æ–ª–æ–¥–Ω—ã–π –∫—ç—à)
  log('\n  –•–æ–ª–æ–¥–Ω—ã–π –∫—ç—à:', 'dim');
  client.reset();
  await client.request(endpoint);
  const coldMetrics = client.getMetrics();
  if (coldMetrics) {
    logMetric('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', coldMetrics.mean);
  }
  
  // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–≥–æ—Ä—è—á–∏–π –∫—ç—à)
  log('\n  –ì–æ—Ä—è—á–∏–π –∫—ç—à (10 –∑–∞–ø—Ä–æ—Å–æ–≤):', 'dim');
  client.reset();
  for (let i = 0; i < 10; i++) {
    await client.request(endpoint);
  }
  const hotMetrics = client.getMetrics();
  if (hotMetrics) {
    logMetric('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', hotMetrics.mean);
    
    if (coldMetrics && hotMetrics.mean < coldMetrics.mean) {
      const improvement = ((coldMetrics.mean - hotMetrics.mean) / coldMetrics.mean * 100);
      log(`  –£–ª—É—á—à–µ–Ω–∏–µ: ${improvement.toFixed(1)}% üöÄ`, 'green');
    }
  }
}

// –¢–ï–°–¢: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
async function testConcurrentOperations() {
  log('\nüîÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò', 'cyan');
  
  const client = new LoadTestClient(BASE_URL);
  
  // –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  const operations = [
    '/api/products?limit=10',
    '/api/categories',
    '/api/manufacturers',
    '/api/products/search?q=test',
    '/api/health'
  ];
  
  log('\n  –ó–∞–ø—É—Å–∫ 5 —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (10 —Ä–∞–∑):', 'dim');
  
  const startTime = performance.now();
  const promises = [];
  
  for (let i = 0; i < 10; i++) {
    for (const op of operations) {
      promises.push(client.request(op).catch(() => {}));
    }
  }
  
  await Promise.all(promises);
  const duration = performance.now() - startTime;
  
  const metrics = client.getMetrics();
  if (metrics) {
    log(`    –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${metrics.total}`, 'blue');
    log(`    –£—Å–ø–µ—à–Ω—ã—Ö: ${metrics.successful}`, 'green');
    log(`    –û–±—â–µ–µ –≤—Ä–µ–º—è: ${duration.toFixed(2)}ms`, 'blue');
    logMetric('    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è/–æ–ø–µ—Ä–∞—Ü–∏—è', metrics.mean);
    logMetric('    RPS', metrics.successful / (duration / 1000), ' ops/s');
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function generateReport() {
  log('\n' + '='.repeat(60), 'bold');
  log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò', 'bold');
  log('='.repeat(60), 'bold');
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  let totalTests = testResults.length;
  let passedThresholds = 0;
  let warnings = [];
  let criticals = [];
  
  testResults.forEach(result => {
    if (result.metrics) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
      if (result.metrics.p95 < 1000) passedThresholds++;
      if (result.metrics.p95 > 2000) {
        criticals.push(`${result.endpoint || result.scenario}: P95 = ${result.metrics.p95.toFixed(0)}ms`);
      } else if (result.metrics.p95 > 1000) {
        warnings.push(`${result.endpoint || result.scenario}: P95 = ${result.metrics.p95.toFixed(0)}ms`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
      if (result.metrics.errorRate > 5) {
        criticals.push(`${result.endpoint || result.scenario}: Error rate = ${result.metrics.errorRate.toFixed(1)}%`);
      }
    }
  });
  
  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
  log('\nüìà –û–ë–©–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:', 'cyan');
  const performanceScore = (passedThresholds / totalTests) * 100;
  const scoreColor = performanceScore > 80 ? 'green' : performanceScore > 60 ? 'yellow' : 'red';
  log(`  –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${performanceScore.toFixed(0)}%`, scoreColor);
  
  if (warnings.length > 0) {
    log('\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:', 'yellow');
    warnings.forEach(w => log(`  ‚Ä¢ ${w}`, 'yellow'));
  }
  
  if (criticals.length > 0) {
    log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:', 'red');
    criticals.forEach(c => log(`  ‚Ä¢ ${c}`, 'red'));
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'magenta');
  
  if (criticals.length > 0) {
    log('  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö endpoints', 'dim');
    log('  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'dim');
    log('  ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è', 'dim');
  }
  
  if (performanceScore < 80) {
    log('  ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Å–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (gzip)', 'dim');
    log('  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ API', 'dim');
    log('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö', 'dim');
  }
  
  log('  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', 'dim');
  log('  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã', 'dim');
  log('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤', 'dim');
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
async function runPerformanceTests() {
  log('\n' + '='.repeat(60), 'bold');
  log('‚ö° –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò MEDSIP.PROTEZ', 'bold');
  log('='.repeat(60), 'bold');
  log(`üìç URL: ${BASE_URL}`, 'blue');
  log(`‚è±Ô∏è  Timeout: ${TIMEOUT}ms`, 'blue');
  
  const startTime = Date.now();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const client = new LoadTestClient(BASE_URL);
    await client.request('/api/health');
  } catch (error) {
    log('\n‚ùå –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!', 'red');
    log(`–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${BASE_URL}`, 'yellow');
    log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev', 'yellow');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  await testEndpointPerformance();
  await testDatabasePerformance();
  await testCachingPerformance();
  await testConcurrentOperations();
  await testLoadScenarios();
  
  // –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
  if (process.env.RUN_STRESS_TEST === 'true') {
    await testStressScenario();
  } else {
    log('\nüí° –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å RUN_STRESS_TEST=true', 'yellow');
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateReport();
  
  const duration = Date.now() - startTime;
  log(`\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${(duration/1000).toFixed(2)}s`, 'blue');
  
  // Exit –∫–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const performanceScore = (testResults.filter(r => r.metrics && r.metrics.p95 < 1000).length / testResults.length) * 100;
  
  if (performanceScore >= 80) {
    log('\nüéâ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –û–¢–õ–ò–ß–ù–ê–Ø!', 'green');
    process.exit(0);
  } else if (performanceScore >= 60) {
    log('\n‚ö†Ô∏è  –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø', 'yellow');
    process.exit(0);
  } else {
    log('\n‚ùå –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–ê–Ø', 'red');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  console.error(error);
  process.exit(1);
});

// Graceful shutdown
process.on('SIGINT', () => {
  log('\n\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'yellow');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runPerformanceTests().catch(error => {
  log('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', 'red');
  console.error(error);
  process.exit(1);
});