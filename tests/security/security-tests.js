#!/usr/bin/env node

/**
 * –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–õ–Ø MEDSIP.PROTEZ
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç SQL injection, XSS, CSRF –∏ –¥—Ä—É–≥–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
 * 
 * –ó–∞–ø—É—Å–∫: node tests/security/security-tests.js
 */

const http = require('http');
const https = require('https');
const { URL } = require('url');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.TEST_URL || 'http://localhost:3010';
const TIMEOUT = 10000;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
  dim: '\x1b[2m'
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
let vulnerabilities = [];

// –£—Ç–∏–ª–∏—Ç—ã
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(name, status, message = '') {
  const icon = status === 'pass' ? '‚úÖ' : status === 'fail' ? '‚ùå' : '‚ö†Ô∏è';
  const color = status === 'pass' ? 'green' : status === 'fail' ? 'red' : 'yellow';
  log(`  ${icon} ${name}${message ? ': ' + message : ''}`, color);
}

function logGroup(name) {
  log(`\nüîí ${name}`, 'cyan');
}

// HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SecurityTestClient {
  async request(url, options = {}) {
    return new Promise((resolve, reject) => {
      const parsedUrl = new URL(url, BASE_URL);
      const client = parsedUrl.protocol === 'https:' ? https : http;
      
      const reqOptions = {
        hostname: parsedUrl.hostname,
        port: parsedUrl.port,
        path: parsedUrl.pathname + parsedUrl.search,
        method: options.method || 'GET',
        headers: options.headers || {},
        timeout: TIMEOUT
      };

      const req = client.request(reqOptions, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: data
          });
        });
      });

      req.on('error', reject);
      req.on('timeout', () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      if (options.body) {
        req.write(options.body);
      }
      
      req.end();
    });
  }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function test(name, testFn) {
  totalTests++;
  
  try {
    const result = await testFn();
    if (result.vulnerable) {
      failedTests++;
      vulnerabilities.push({
        name,
        severity: result.severity || 'medium',
        details: result.details
      });
      logTest(name, 'fail', result.message);
    } else {
      passedTests++;
      logTest(name, 'pass', result.message);
    }
    return result;
  } catch (error) {
    failedTests++;
    logTest(name, 'fail', error.message);
    return { vulnerable: true, error: error.message };
  }
}

// SQL INJECTION –¢–ï–°–¢–´
async function testSQLInjection(client) {
  logGroup('SQL INJECTION –¢–ï–°–¢–´');
  
  // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ SQL injection –ø–æ–ø—ã—Ç–∫–∏
  const sqlPayloads = [
    "' OR '1'='1",
    "1' OR '1'='1' --",
    "' OR 1=1 --",
    "admin' --",
    "' UNION SELECT * FROM users --",
    "'; DROP TABLE products; --",
    "1' AND (SELECT * FROM (SELECT(SLEEP(5)))a) --",
    "' OR EXISTS(SELECT * FROM users WHERE username='admin') --",
    "1' AND ASCII(SUBSTRING((SELECT password FROM users LIMIT 1),1,1))>64 --",
    "' OR pg_sleep(5) --"
  ];
  
  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
  await test('SQL Injection –≤ –ø–æ–∏—Å–∫–µ', async () => {
    for (const payload of sqlPayloads) {
      const res = await client.request(`/api/products/search?q=${encodeURIComponent(payload)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç SQL –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
      if (res.data.includes('syntax error') || 
          res.data.includes('SQL') || 
          res.data.includes('PostgreSQL') ||
          res.data.includes('mysql') ||
          res.status === 500) {
        return {
          vulnerable: true,
          severity: 'critical',
          message: `–£—è–∑–≤–∏–º –∫ SQL injection: ${payload}`,
          details: `Payload –≤—ã–∑–≤–∞–ª SQL –æ—à–∏–±–∫—É`
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ –∑–∞–ø–∏—Å–∏
      try {
        const parsed = JSON.parse(res.data);
        if (parsed.data && parsed.data.length > 100) {
          return {
            vulnerable: true,
            severity: 'critical',
            message: `–í–æ–∑–º–æ–∂–Ω–∞ SQL injection: ${payload}`,
            details: `–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π`
          };
        }
      } catch (e) {}
    }
    
    return { vulnerable: false, message: '–ó–∞—â–∏—â–µ–Ω –æ—Ç SQL injection –≤ –ø–æ–∏—Å–∫–µ' };
  });
  
  // –¢–µ—Å—Ç ID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  await test('SQL Injection –≤ ID –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö', async () => {
    const idPayloads = [
      "1 OR 1=1",
      "1' OR '1'='1",
      "1; DROP TABLE products",
      "-1 UNION SELECT * FROM users"
    ];
    
    for (const payload of idPayloads) {
      const res = await client.request(`/api/products/${encodeURIComponent(payload)}`);
      
      if (res.data.includes('syntax error') || res.data.includes('SQL')) {
        return {
          vulnerable: true,
          severity: 'critical',
          message: `–£—è–∑–≤–∏–º –∫ SQL injection –≤ ID: ${payload}`,
          details: `ID –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è`
        };
      }
    }
    
    return { vulnerable: false, message: 'ID –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã' };
  });
  
  // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
  await test('SQL Injection –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö', async () => {
    const filterPayloads = [
      "1' OR '1'='1",
      "'; DELETE FROM products WHERE ''='"
    ];
    
    for (const payload of filterPayloads) {
      const res = await client.request(`/api/products?category_id=${encodeURIComponent(payload)}`);
      
      if (res.status === 500 || res.data.includes('error')) {
        // –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∑–∞—â–∏—Ç—É, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏
        if (res.data.includes('syntax') || res.data.includes('SQL')) {
          return {
            vulnerable: true,
            severity: 'high',
            message: `SQL injection –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö: ${payload}`,
            details: `–§–∏–ª—å—Ç—Ä—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è`
          };
        }
      }
    }
    
    return { vulnerable: false, message: '–§–∏–ª—å—Ç—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç SQL injection' };
  });
}

// XSS –¢–ï–°–¢–´
async function testXSS(client) {
  logGroup('XSS (CROSS-SITE SCRIPTING) –¢–ï–°–¢–´');
  
  const xssPayloads = [
    '<script>alert("XSS")</script>',
    '<img src=x onerror="alert(\'XSS\')">',
    '<svg onload="alert(\'XSS\')">',
    'javascript:alert("XSS")',
    '<iframe src="javascript:alert(\'XSS\')">',
    '<body onload="alert(\'XSS\')">',
    '"><script>alert("XSS")</script>',
    '<script>document.cookie</script>',
    '<a href="javascript:alert(\'XSS\')">click</a>',
    '${alert("XSS")}',
    '{{constructor.constructor("alert(1)")()}}' // Template injection
  ];
  
  // –¢–µ—Å—Ç reflected XSS –≤ –ø–æ–∏—Å–∫–µ
  await test('Reflected XSS –≤ –ø–æ–∏—Å–∫–µ', async () => {
    for (const payload of xssPayloads) {
      const res = await client.request(`/api/products/search?q=${encodeURIComponent(payload)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ payload –Ω–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      if (res.data.includes(payload) || 
          res.data.includes('<script>') && !res.data.includes('&lt;script&gt;')) {
        return {
          vulnerable: true,
          severity: 'high',
          message: `Reflected XSS –Ω–∞–π–¥–µ–Ω: ${payload}`,
          details: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è`
        };
      }
    }
    
    return { vulnerable: false, message: '–ó–∞—â–∏—â–µ–Ω –æ—Ç reflected XSS' };
  });
  
  // –¢–µ—Å—Ç stored XSS (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
  await test('Stored XSS –ø—Ä–æ–≤–µ—Ä–∫–∞', async () => {
    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å XSS (–µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω)
    const xssProduct = {
      name: '<script>alert("Stored XSS")</script>',
      description: '<img src=x onerror="alert(\'XSS\')">',
      price: 100
    };
    
    const createRes = await client.request('/api/products', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(xssProduct)
    });
    
    if (createRes.status === 404 || createRes.status === 405) {
      return { vulnerable: false, message: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ (—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)' };
    }
    
    if (createRes.status === 201 || createRes.status === 200) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
      const data = JSON.parse(createRes.data);
      if (data.name && data.name.includes('<script>')) {
        return {
          vulnerable: true,
          severity: 'critical',
          message: 'Stored XSS –≤–æ–∑–º–æ–∂–µ–Ω',
          details: 'HTML –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏'
        };
      }
    }
    
    return { vulnerable: false, message: '–ó–∞—â–∏—â–µ–Ω –æ—Ç stored XSS' };
  });
  
  // –¢–µ—Å—Ç DOM XSS
  await test('DOM-based XSS –∑–∞—â–∏—Ç–∞', async () => {
    const domPayloads = [
      '#<script>alert("XSS")</script>',
      '?redirect=javascript:alert("XSS")',
      '&callback=alert'
    ];
    
    for (const payload of domPayloads) {
      const res = await client.request(`/api/products${payload}`);
      
      if (res.data.includes('alert') && !res.data.includes('&lt;')) {
        return {
          vulnerable: true,
          severity: 'medium',
          message: `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π DOM XSS: ${payload}`,
          details: `URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã`
        };
      }
    }
    
    return { vulnerable: false, message: '–ó–∞—â–∏—â–µ–Ω –æ—Ç DOM XSS' };
  });
}

// CSRF –¢–ï–°–¢–´
async function testCSRF(client) {
  logGroup('CSRF (CROSS-SITE REQUEST FORGERY) –¢–ï–°–¢–´');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–æ–≤
  await test('CSRF —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∞', async () => {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    const res = await client.request('/api/products/1', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Origin': 'http://evil.com'
      },
      body: JSON.stringify({ price: 1 })
    });
    
    if (res.status === 404 || res.status === 405) {
      return { vulnerable: false, message: '–ú–µ—Ç–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)' };
    }
    
    if (res.status === 200 || res.status === 201) {
      return {
        vulnerable: true,
        severity: 'high',
        message: 'CSRF –∑–∞—â–∏—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        details: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞'
      };
    }
    
    return { vulnerable: false, message: 'CSRF —Ç–æ–∫–µ–Ω—ã —Ç—Ä–µ–±—É—é—Ç—Å—è' };
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SameSite cookies
  await test('SameSite Cookie –∑–∞—â–∏—Ç–∞', async () => {
    const res = await client.request('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: 'test', password: 'test' })
    });
    
    if (res.status === 404) {
      return { vulnerable: false, message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)' };
    }
    
    if (res.headers['set-cookie']) {
      const cookies = res.headers['set-cookie'];
      const hasSameSite = cookies.some(cookie => 
        cookie.toLowerCase().includes('samesite=strict') || 
        cookie.toLowerCase().includes('samesite=lax')
      );
      
      if (!hasSameSite) {
        return {
          vulnerable: true,
          severity: 'medium',
          message: 'Cookies –±–µ–∑ SameSite –∞—Ç—Ä–∏–±—É—Ç–∞',
          details: '–£—è–∑–≤–∏–º—ã –∫ CSRF –∞—Ç–∞–∫–∞–º'
        };
      }
    }
    
    return { vulnerable: false, message: 'SameSite cookies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' };
  });
}

// AUTHENTICATION/AUTHORIZATION –¢–ï–°–¢–´
async function testAuthSecurity(client) {
  logGroup('–ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø');
  
  // –¢–µ—Å—Ç brute force –∑–∞—â–∏—Ç—ã
  await test('–ó–∞—â–∏—Ç–∞ –æ—Ç brute force', async () => {
    const attempts = 10;
    let blocked = false;
    
    for (let i = 0; i < attempts; i++) {
      const res = await client.request('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          username: 'admin', 
          password: `wrong${i}` 
        })
      });
      
      if (res.status === 404) {
        return { vulnerable: false, message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)' };
      }
      
      if (res.status === 429 || res.data.includes('rate limit')) {
        blocked = true;
        break;
      }
    }
    
    if (!blocked) {
      return {
        vulnerable: true,
        severity: 'high',
        message: '–ù–µ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç brute force',
        details: `${attempts} –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏`
      };
    }
    
    return { vulnerable: false, message: 'Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç' };
  });
  
  // –¢–µ—Å—Ç —Å–ª–∞–±—ã—Ö –ø–∞—Ä–æ–ª–µ–π
  await test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–∞—Ä–æ–ª–µ–π', async () => {
    const weakPasswords = ['123456', 'password', 'admin', '12345678'];
    
    for (const password of weakPasswords) {
      const res = await client.request('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: 'testuser',
          password: password,
          email: 'test@example.com'
        })
      });
      
      if (res.status === 404) {
        return { vulnerable: false, message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)' };
      }
      
      if (res.status === 201 || res.status === 200) {
        return {
          vulnerable: true,
          severity: 'medium',
          message: '–°–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è',
          details: `–ü–∞—Ä–æ–ª—å "${password}" –±—ã–ª –ø—Ä–∏–Ω—è—Ç`
        };
      }
    }
    
    return { vulnerable: false, message: '–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è' };
  });
  
  // –¢–µ—Å—Ç JWT –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  await test('JWT —Ç–æ–∫–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', async () => {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
    const fakeToken = 'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTUxNjIzOTAyMn0.';
    
    const res = await client.request('/api/user/profile', {
      headers: {
        'Authorization': `Bearer ${fakeToken}`
      }
    });
    
    if (res.status === 404) {
      return { vulnerable: false, message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)' };
    }
    
    if (res.status === 200) {
      return {
        vulnerable: true,
        severity: 'critical',
        message: 'JWT –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è',
        details: '–ê–ª–≥–æ—Ä–∏—Ç–º "none" –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω'
      };
    }
    
    return { vulnerable: false, message: 'JWT –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç' };
  });
}

// INJECTION –¢–ï–°–¢–´ (–¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã)
async function testOtherInjections(client) {
  logGroup('–î–†–£–ì–ò–ï –¢–ò–ü–´ –ò–ù–™–ï–ö–¶–ò–ô');
  
  // NoSQL Injection
  await test('NoSQL Injection –∑–∞—â–∏—Ç–∞', async () => {
    const nosqlPayloads = [
      '{"$gt": ""}',
      '{"$ne": null}',
      '{"$regex": ".*"}',
      '{"password": {"$ne": "wrong"}}'
    ];
    
    for (const payload of nosqlPayloads) {
      const res = await client.request('/api/products/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: payload
      });
      
      if (res.status === 200 && res.data.includes('"data":[')) {
        const data = JSON.parse(res.data);
        if (data.data && data.data.length > 50) {
          return {
            vulnerable: true,
            severity: 'high',
            message: 'NoSQL injection –≤–æ–∑–º–æ–∂–Ω–∞',
            details: `Payload ${payload} –≤–µ—Ä–Ω—É–ª –≤—Å–µ –∑–∞–ø–∏—Å–∏`
          };
        }
      }
    }
    
    return { vulnerable: false, message: '–ó–∞—â–∏—â–µ–Ω –æ—Ç NoSQL injection' };
  });
  
  // Command Injection
  await test('Command Injection –∑–∞—â–∏—Ç–∞', async () => {
    const cmdPayloads = [
      '; ls -la',
      '| whoami',
      '`cat /etc/passwd`',
      '$(sleep 5)',
      '; ping -c 5 127.0.0.1'
    ];
    
    for (const payload of cmdPayloads) {
      const startTime = Date.now();
      const res = await client.request(`/api/products/export?format=${encodeURIComponent(payload)}`);
      const duration = Date.now() - startTime;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫—É (sleep injection)
      if (duration > 4000 && payload.includes('sleep')) {
        return {
          vulnerable: true,
          severity: 'critical',
          message: 'Command injection –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞',
          details: `Sleep –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (res.data.includes('root:') || res.data.includes('bin:')) {
        return {
          vulnerable: true,
          severity: 'critical',
          message: 'Command injection –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞',
          details: `–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã`
        };
      }
    }
    
    return { vulnerable: false, message: '–ó–∞—â–∏—â–µ–Ω –æ—Ç command injection' };
  });
  
  // Path Traversal
  await test('Path Traversal –∑–∞—â–∏—Ç–∞', async () => {
    const pathPayloads = [
      '../../../etc/passwd',
      '..\\..\\..\\windows\\system32\\config\\sam',
      '../.env',
      '....//....//....//etc/passwd',
      '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd'
    ];
    
    for (const payload of pathPayloads) {
      const res = await client.request(`/api/files/${encodeURIComponent(payload)}`);
      
      if (res.data.includes('root:') || 
          res.data.includes('password') || 
          res.data.includes('API_KEY')) {
        return {
          vulnerable: true,
          severity: 'critical',
          message: 'Path traversal —É—è–∑–≤–∏–º–æ—Å—Ç—å',
          details: `–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º: ${payload}`
        };
      }
    }
    
    return { vulnerable: false, message: '–ó–∞—â–∏—â–µ–Ω –æ—Ç path traversal' };
  });
}

// SECURITY HEADERS –¢–ï–°–¢–´
async function testSecurityHeaders(client) {
  logGroup('HTTP SECURITY HEADERS');
  
  await test('Security Headers –ø—Ä–æ–≤–µ—Ä–∫–∞', async () => {
    const res = await client.request('/api/products');
    const headers = res.headers;
    const missing = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const requiredHeaders = {
      'x-content-type-options': 'nosniff',
      'x-frame-options': ['DENY', 'SAMEORIGIN'],
      'x-xss-protection': '1; mode=block',
      'strict-transport-security': 'max-age=',
      'content-security-policy': ['default-src', 'script-src']
    };
    
    for (const [header, expectedValue] of Object.entries(requiredHeaders)) {
      const headerValue = headers[header.toLowerCase()];
      
      if (!headerValue) {
        missing.push(header);
      } else if (Array.isArray(expectedValue)) {
        const hasValidValue = expectedValue.some(val => 
          headerValue.toLowerCase().includes(val.toLowerCase())
        );
        if (!hasValidValue) {
          missing.push(`${header} (–Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)`);
        }
      } else if (!headerValue.toLowerCase().includes(expectedValue.toLowerCase())) {
        missing.push(`${header} (–Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)`);
      }
    }
    
    if (missing.length > 0) {
      return {
        vulnerable: true,
        severity: 'medium',
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç security headers',
        details: `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${missing.join(', ')}`
      };
    }
    
    return { vulnerable: false, message: '–í—Å–µ security headers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' };
  });
  
  // CORS –ø—Ä–æ–≤–µ—Ä–∫–∞
  await test('CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', async () => {
    const res = await client.request('/api/products', {
      headers: {
        'Origin': 'http://evil.com'
      }
    });
    
    const allowOrigin = res.headers['access-control-allow-origin'];
    
    if (allowOrigin === '*') {
      return {
        vulnerable: true,
        severity: 'medium',
        message: 'CORS —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –¥–æ–º–µ–Ω—ã',
        details: 'Access-Control-Allow-Origin: *'
      };
    }
    
    if (allowOrigin === 'http://evil.com') {
      return {
        vulnerable: true,
        severity: 'high',
        message: 'CORS –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π Origin',
        details: '–û—Ç—Ä–∞–∂–∞–µ—Ç Origin –∑–∞–≥–æ–ª–æ–≤–æ–∫'
      };
    }
    
    return { vulnerable: false, message: 'CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' };
  });
}

// SENSITIVE DATA EXPOSURE –¢–ï–°–¢–´
async function testDataExposure(client) {
  logGroup('–£–¢–ï–ß–ö–ê –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–´–• –î–ê–ù–ù–´–•');
  
  await test('–£—Ç–µ—á–∫–∞ –≤ error messages', async () => {
    // –ü—Ä–æ–≤–æ—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    const res = await client.request('/api/products/abc123xyz');
    
    if (res.data.includes('PostgreSQL') || 
        res.data.includes('stack') || 
        res.data.includes('at Function') ||
        res.data.includes('/home/') ||
        res.data.includes('C:\\Users\\')) {
      return {
        vulnerable: true,
        severity: 'medium',
        message: 'Stack trace –≤ production',
        details: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –≤–∏–¥–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
      };
    }
    
    return { vulnerable: false, message: '–û—à–∏–±–∫–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –¥–µ—Ç–∞–ª–∏' };
  });
  
  await test('–£—Ç–µ—á–∫–∞ –≤ API responses', async () => {
    const res = await client.request('/api/products/1');
    
    if (res.status === 200) {
      const sensitiveFields = [
        'password', 'token', 'secret', 'api_key', 
        'private_key', 'credit_card', 'ssn'
      ];
      
      const dataStr = res.data.toLowerCase();
      for (const field of sensitiveFields) {
        if (dataStr.includes(field)) {
          return {
            vulnerable: true,
            severity: 'critical',
            message: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ API',
            details: `–ü–æ–ª–µ "${field}" –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ`
          };
        }
      }
    }
    
    return { vulnerable: false, message: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã' };
  });
  
  await test('Debug mode –≤ production', async () => {
    const res = await client.request('/api/debug');
    
    if (res.status === 200) {
      return {
        vulnerable: true,
        severity: 'high',
        message: 'Debug endpoint –¥–æ—Å—Ç—É–ø–µ–Ω',
        details: 'Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ production'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ debug headers
    const debugRes = await client.request('/api/products');
    if (debugRes.headers['x-debug'] || 
        debugRes.headers['x-powered-by']) {
      return {
        vulnerable: true,
        severity: 'low',
        message: 'Debug headers –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã',
        details: '–†–∞—Å–∫—Ä—ã–≤–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ'
      };
    }
    
    return { vulnerable: false, message: 'Debug mode –æ—Ç–∫–ª—é—á–µ–Ω' };
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runSecurityTests() {
  log('\n' + '='.repeat(60), 'bold');
  log('üõ°Ô∏è  –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò MEDSIP.PROTEZ', 'bold');
  log('='.repeat(60), 'bold');
  log(`üìç URL: ${BASE_URL}`, 'blue');
  log(`‚è±Ô∏è  Timeout: ${TIMEOUT}ms`, 'blue');
  
  const startTime = Date.now();
  const client = new SecurityTestClient();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    await client.request('/api/health');
  } catch (error) {
    log('\n‚ùå –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù!', 'red');
    log(`–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${BASE_URL}`, 'yellow');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  await testSQLInjection(client);
  await testXSS(client);
  await testCSRF(client);
  await testAuthSecurity(client);
  await testOtherInjections(client);
  await testSecurityHeaders(client);
  await testDataExposure(client);
  
  // –ò—Ç–æ–≥–∏
  const duration = Date.now() - startTime;
  
  log('\n' + '='.repeat(60), 'bold');
  log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò', 'bold');
  log('='.repeat(60), 'bold');
  
  if (vulnerabilities.length > 0) {
    log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:', 'red');
    
    const critical = vulnerabilities.filter(v => v.severity === 'critical');
    const high = vulnerabilities.filter(v => v.severity === 'high');
    const medium = vulnerabilities.filter(v => v.severity === 'medium');
    const low = vulnerabilities.filter(v => v.severity === 'low');
    
    if (critical.length > 0) {
      log('\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï:', 'red');
      critical.forEach(v => {
        log(`  ‚Ä¢ ${v.name}`, 'red');
        log(`    ${v.details}`, 'dim');
      });
    }
    
    if (high.length > 0) {
      log('\nüü† –í–´–°–û–ö–ò–ï:', 'yellow');
      high.forEach(v => {
        log(`  ‚Ä¢ ${v.name}`, 'yellow');
        log(`    ${v.details}`, 'dim');
      });
    }
    
    if (medium.length > 0) {
      log('\nüü° –°–†–ï–î–ù–ò–ï:', 'yellow');
      medium.forEach(v => {
        log(`  ‚Ä¢ ${v.name}`, 'yellow');
        log(`    ${v.details}`, 'dim');
      });
    }
    
    if (low.length > 0) {
      log('\n‚ö™ –ù–ò–ó–ö–ò–ï:', 'dim');
      low.forEach(v => {
        log(`  ‚Ä¢ ${v.name}`, 'dim');
        log(`    ${v.details}`, 'dim');
      });
    }
  }
  
  log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`, 'blue');
  log(`üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`, failedTests > 0 ? 'red' : 'green');
  
  const securityScore = totalTests > 0 
    ? Math.round((passedTests / totalTests) * 100) 
    : 0;
  
  log(`\nüõ°Ô∏è  Security Score: ${securityScore}%`, 
    securityScore >= 90 ? 'green' : 
    securityScore >= 70 ? 'yellow' : 'red'
  );
  
  if (vulnerabilities.length === 0) {
    log('\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!', 'green');
  } else {
    const criticalCount = vulnerabilities.filter(v => v.severity === 'critical').length;
    if (criticalCount > 0) {
      log(`\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–û ${criticalCount} –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô!`, 'red');
      log('–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!', 'red');
    }
  }
  
  // Exit –∫–æ–¥
  process.exit(failedTests > 0 ? 1 : 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  console.error(error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
runSecurityTests().catch(error => {
  log('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', 'red');
  console.error(error);
  process.exit(1);
});