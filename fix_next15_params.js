#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
const findDynamicRoutes = () => {
  try {
    const result = execSync('find app/api -type f -name "route.ts" | grep "\\["', { encoding: 'utf8' });
    return result.trim().split('\n').filter(line => line.length > 0);
  } catch (error) {
    console.error('Error finding dynamic routes:', error.message);
    return [];
  }
};

// –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª
const fixFile = (filePath) => {
  try {
    console.log(`Fixing ${filePath}...`);
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
    const patterns = [
      {
        from: /\{ params \}: \{ params: \{ id: string \} \}/g,
        to: '{ params }: { params: Promise<{ id: string }> }'
      },
      {
        from: /\{ params \}: \{ params: \{ itemId: string \} \}/g,
        to: '{ params }: { params: Promise<{ itemId: string }> }'
      },
      {
        from: /\{ params \}: \{ params: \{ tagId: string \} \}/g,
        to: '{ params }: { params: Promise<{ tagId: string }> }'
      },
      {
        from: /\{ params \}: \{ params: \{ table: string \} \}/g,
        to: '{ params }: { params: Promise<{ table: string }> }'
      },
      {
        from: /\{ params \}: \{ params: \{ id: string; itemId: string \} \}/g,
        to: '{ params }: { params: Promise<{ id: string; itemId: string }> }'
      }
    ];

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–º–µ–Ω—ã —Ç–∏–ø–æ–≤
    patterns.forEach(pattern => {
      if (pattern.from.test(content)) {
        content = content.replace(pattern.from, pattern.to);
        modified = true;
      }
    });

    // –ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ params.id, params.itemId –∏ —Ç.–¥.
    const usagePatterns = [
      {
        from: /const\s+(\w+)\s*=\s*parseInt\(params\.id\)/g,
        to: (match, varName) => `const resolvedParams = await params\n    const ${varName} = parseInt(resolvedParams.id)`
      },
      {
        from: /const\s+(\w+)\s*=\s*params\.id/g,
        to: (match, varName) => `const resolvedParams = await params\n    const ${varName} = resolvedParams.id`
      },
      {
        from: /const\s+(\w+)\s*=\s*parseInt\(params\.itemId\)/g,
        to: (match, varName) => `const resolvedParams = await params\n    const ${varName} = parseInt(resolvedParams.itemId)`
      },
      {
        from: /const\s+(\w+)\s*=\s*params\.itemId/g,
        to: (match, varName) => `const resolvedParams = await params\n    const ${varName} = resolvedParams.itemId`
      },
      {
        from: /const\s+(\w+)\s*=\s*params\.tagId/g,
        to: (match, varName) => `const resolvedParams = await params\n    const ${varName} = resolvedParams.tagId`
      },
      {
        from: /const\s+(\w+)\s*=\s*params\.table/g,
        to: (match, varName) => `const resolvedParams = await params\n    const ${varName} = resolvedParams.table`
      }
    ];

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usagePatterns.forEach(pattern => {
      if (pattern.from.test(content)) {
        content = content.replace(pattern.from, pattern.to);
        modified = true;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if (content.includes('params.id') && content.includes('params.itemId')) {
      // –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ params –Ω–∞ resolvedParams
      content = content.replace(/params\.id/g, 'resolvedParams.id');
      content = content.replace(/params\.itemId/g, 'resolvedParams.itemId');
      
      // –î–æ–±–∞–≤–∏—Ç—å await params –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!content.includes('resolvedParams = await params')) {
        content = content.replace(
          /(export async function \w+\([^)]+\) \{\s*try \{)/,
          '$1\n    const resolvedParams = await params'
        );
      }
      modified = true;
    }

    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ Fixed ${filePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  No changes needed for ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå Error fixing ${filePath}:`, error.message);
    return false;
  }
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = () => {
  console.log('üîß Fixing Next.js 15 async params...\n');
  
  const dynamicRoutes = findDynamicRoutes();
  console.log(`Found ${dynamicRoutes.length} dynamic route files\n`);
  
  let fixedCount = 0;
  dynamicRoutes.forEach(filePath => {
    if (fixFile(filePath)) {
      fixedCount++;
    }
  });
  
  console.log(`\n‚ú® Fixed ${fixedCount} files out of ${dynamicRoutes.length} total`);
  console.log('üéâ Next.js 15 async params migration complete!');
};

if (require.main === module) {
  main();
}

module.exports = { fixFile, findDynamicRoutes };